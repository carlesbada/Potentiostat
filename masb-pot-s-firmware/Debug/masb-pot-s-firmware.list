
masb-pot-s-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a7c  08004a7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000018  08004a98  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004a98  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014aba  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a1a  00000000  00000000  00034afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff8  00000000  00000000  00037518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00038510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001855f  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4cc  00000000  00000000  0005193f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009387a  00000000  00000000  0005fe0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  000f3700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a1c 	.word	0x08004a1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08004a1c 	.word	0x08004a1c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_uldivmod>:
 8000ad8:	b953      	cbnz	r3, 8000af0 <__aeabi_uldivmod+0x18>
 8000ada:	b94a      	cbnz	r2, 8000af0 <__aeabi_uldivmod+0x18>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	bf08      	it	eq
 8000ae0:	2800      	cmpeq	r0, #0
 8000ae2:	bf1c      	itt	ne
 8000ae4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae8:	f04f 30ff 	movne.w	r0, #4294967295
 8000aec:	f000 b972 	b.w	8000dd4 <__aeabi_idiv0>
 8000af0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af8:	f000 f806 	bl	8000b08 <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4770      	bx	lr

08000b08 <__udivmoddi4>:
 8000b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b0c:	9e08      	ldr	r6, [sp, #32]
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4688      	mov	r8, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d14b      	bne.n	8000bae <__udivmoddi4+0xa6>
 8000b16:	428a      	cmp	r2, r1
 8000b18:	4615      	mov	r5, r2
 8000b1a:	d967      	bls.n	8000bec <__udivmoddi4+0xe4>
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	b14a      	cbz	r2, 8000b36 <__udivmoddi4+0x2e>
 8000b22:	f1c2 0720 	rsb	r7, r2, #32
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b2e:	4095      	lsls	r5, r2
 8000b30:	ea47 0803 	orr.w	r8, r7, r3
 8000b34:	4094      	lsls	r4, r2
 8000b36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3a:	0c23      	lsrs	r3, r4, #16
 8000b3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b40:	fa1f fc85 	uxth.w	ip, r5
 8000b44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x60>
 8000b54:	18eb      	adds	r3, r5, r3
 8000b56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b5a:	f080 811b 	bcs.w	8000d94 <__udivmoddi4+0x28c>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 8118 	bls.w	8000d94 <__udivmoddi4+0x28c>
 8000b64:	3f02      	subs	r7, #2
 8000b66:	442b      	add	r3, r5
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b7c:	45a4      	cmp	ip, r4
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x8c>
 8000b80:	192c      	adds	r4, r5, r4
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	f080 8107 	bcs.w	8000d98 <__udivmoddi4+0x290>
 8000b8a:	45a4      	cmp	ip, r4
 8000b8c:	f240 8104 	bls.w	8000d98 <__udivmoddi4+0x290>
 8000b90:	3802      	subs	r0, #2
 8000b92:	442c      	add	r4, r5
 8000b94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b98:	eba4 040c 	sub.w	r4, r4, ip
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	b11e      	cbz	r6, 8000ba8 <__udivmoddi4+0xa0>
 8000ba0:	40d4      	lsrs	r4, r2
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba8:	4639      	mov	r1, r7
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d909      	bls.n	8000bc6 <__udivmoddi4+0xbe>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	f000 80eb 	beq.w	8000d8e <__udivmoddi4+0x286>
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e9c6 0100 	strd	r0, r1, [r6]
 8000bbe:	4638      	mov	r0, r7
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	fab3 f783 	clz	r7, r3
 8000bca:	2f00      	cmp	r7, #0
 8000bcc:	d147      	bne.n	8000c5e <__udivmoddi4+0x156>
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d302      	bcc.n	8000bd8 <__udivmoddi4+0xd0>
 8000bd2:	4282      	cmp	r2, r0
 8000bd4:	f200 80fa 	bhi.w	8000dcc <__udivmoddi4+0x2c4>
 8000bd8:	1a84      	subs	r4, r0, r2
 8000bda:	eb61 0303 	sbc.w	r3, r1, r3
 8000bde:	2001      	movs	r0, #1
 8000be0:	4698      	mov	r8, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d0e0      	beq.n	8000ba8 <__udivmoddi4+0xa0>
 8000be6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bea:	e7dd      	b.n	8000ba8 <__udivmoddi4+0xa0>
 8000bec:	b902      	cbnz	r2, 8000bf0 <__udivmoddi4+0xe8>
 8000bee:	deff      	udf	#255	; 0xff
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	f040 808f 	bne.w	8000d18 <__udivmoddi4+0x210>
 8000bfa:	1b49      	subs	r1, r1, r5
 8000bfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c00:	fa1f f885 	uxth.w	r8, r5
 8000c04:	2701      	movs	r7, #1
 8000c06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb08 f10c 	mul.w	r1, r8, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0x124>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x122>
 8000c24:	4299      	cmp	r1, r3
 8000c26:	f200 80cd 	bhi.w	8000dc4 <__udivmoddi4+0x2bc>
 8000c2a:	4684      	mov	ip, r0
 8000c2c:	1a59      	subs	r1, r3, r1
 8000c2e:	b2a3      	uxth	r3, r4
 8000c30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c3c:	fb08 f800 	mul.w	r8, r8, r0
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x14c>
 8000c44:	192c      	adds	r4, r5, r4
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x14a>
 8000c4c:	45a0      	cmp	r8, r4
 8000c4e:	f200 80b6 	bhi.w	8000dbe <__udivmoddi4+0x2b6>
 8000c52:	4618      	mov	r0, r3
 8000c54:	eba4 0408 	sub.w	r4, r4, r8
 8000c58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c5c:	e79f      	b.n	8000b9e <__udivmoddi4+0x96>
 8000c5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c62:	40bb      	lsls	r3, r7
 8000c64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c7c:	4325      	orrs	r5, r4
 8000c7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c82:	0c2c      	lsrs	r4, r5, #16
 8000c84:	fb08 3319 	mls	r3, r8, r9, r3
 8000c88:	fa1f fa8e 	uxth.w	sl, lr
 8000c8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c90:	fb09 f40a 	mul.w	r4, r9, sl
 8000c94:	429c      	cmp	r4, r3
 8000c96:	fa02 f207 	lsl.w	r2, r2, r7
 8000c9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000c9e:	d90b      	bls.n	8000cb8 <__udivmoddi4+0x1b0>
 8000ca0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca8:	f080 8087 	bcs.w	8000dba <__udivmoddi4+0x2b2>
 8000cac:	429c      	cmp	r4, r3
 8000cae:	f240 8084 	bls.w	8000dba <__udivmoddi4+0x2b2>
 8000cb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb6:	4473      	add	r3, lr
 8000cb8:	1b1b      	subs	r3, r3, r4
 8000cba:	b2ad      	uxth	r5, r5
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ccc:	45a2      	cmp	sl, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1da>
 8000cd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd8:	d26b      	bcs.n	8000db2 <__udivmoddi4+0x2aa>
 8000cda:	45a2      	cmp	sl, r4
 8000cdc:	d969      	bls.n	8000db2 <__udivmoddi4+0x2aa>
 8000cde:	3802      	subs	r0, #2
 8000ce0:	4474      	add	r4, lr
 8000ce2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cea:	eba4 040a 	sub.w	r4, r4, sl
 8000cee:	454c      	cmp	r4, r9
 8000cf0:	46c2      	mov	sl, r8
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	d354      	bcc.n	8000da0 <__udivmoddi4+0x298>
 8000cf6:	d051      	beq.n	8000d9c <__udivmoddi4+0x294>
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d069      	beq.n	8000dd0 <__udivmoddi4+0x2c8>
 8000cfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000d00:	eb64 0403 	sbc.w	r4, r4, r3
 8000d04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d08:	40fd      	lsrs	r5, r7
 8000d0a:	40fc      	lsrs	r4, r7
 8000d0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d10:	e9c6 5400 	strd	r5, r4, [r6]
 8000d14:	2700      	movs	r7, #0
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0xa0>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d20:	4095      	lsls	r5, r2
 8000d22:	fa01 f002 	lsl.w	r0, r1, r2
 8000d26:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2e:	4338      	orrs	r0, r7
 8000d30:	0c01      	lsrs	r1, r0, #16
 8000d32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d36:	fa1f f885 	uxth.w	r8, r5
 8000d3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb07 f308 	mul.w	r3, r7, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x256>
 8000d4e:	1869      	adds	r1, r5, r1
 8000d50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d54:	d22f      	bcs.n	8000db6 <__udivmoddi4+0x2ae>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d92d      	bls.n	8000db6 <__udivmoddi4+0x2ae>
 8000d5a:	3f02      	subs	r7, #2
 8000d5c:	4429      	add	r1, r5
 8000d5e:	1acb      	subs	r3, r1, r3
 8000d60:	b281      	uxth	r1, r0
 8000d62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb00 f308 	mul.w	r3, r0, r8
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x27e>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7c:	d217      	bcs.n	8000dae <__udivmoddi4+0x2a6>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d915      	bls.n	8000dae <__udivmoddi4+0x2a6>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d8c:	e73b      	b.n	8000c06 <__udivmoddi4+0xfe>
 8000d8e:	4637      	mov	r7, r6
 8000d90:	4630      	mov	r0, r6
 8000d92:	e709      	b.n	8000ba8 <__udivmoddi4+0xa0>
 8000d94:	4607      	mov	r7, r0
 8000d96:	e6e7      	b.n	8000b68 <__udivmoddi4+0x60>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6fb      	b.n	8000b94 <__udivmoddi4+0x8c>
 8000d9c:	4541      	cmp	r1, r8
 8000d9e:	d2ab      	bcs.n	8000cf8 <__udivmoddi4+0x1f0>
 8000da0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da4:	eb69 020e 	sbc.w	r2, r9, lr
 8000da8:	3801      	subs	r0, #1
 8000daa:	4613      	mov	r3, r2
 8000dac:	e7a4      	b.n	8000cf8 <__udivmoddi4+0x1f0>
 8000dae:	4660      	mov	r0, ip
 8000db0:	e7e9      	b.n	8000d86 <__udivmoddi4+0x27e>
 8000db2:	4618      	mov	r0, r3
 8000db4:	e795      	b.n	8000ce2 <__udivmoddi4+0x1da>
 8000db6:	4667      	mov	r7, ip
 8000db8:	e7d1      	b.n	8000d5e <__udivmoddi4+0x256>
 8000dba:	4681      	mov	r9, r0
 8000dbc:	e77c      	b.n	8000cb8 <__udivmoddi4+0x1b0>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	442c      	add	r4, r5
 8000dc2:	e747      	b.n	8000c54 <__udivmoddi4+0x14c>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	442b      	add	r3, r5
 8000dca:	e72f      	b.n	8000c2c <__udivmoddi4+0x124>
 8000dcc:	4638      	mov	r0, r7
 8000dce:	e708      	b.n	8000be2 <__udivmoddi4+0xda>
 8000dd0:	4637      	mov	r7, r6
 8000dd2:	e6e9      	b.n	8000ba8 <__udivmoddi4+0xa0>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <ADC_function>:
ADC_HandleTypeDef hadc1;
extern double vcell=0;

// what we want out of this function, with inputs count and sampling period, is to have an structure Data_S pointdata
// whose variables are characteristic for each point in chronoamperometry and cyclic voltammetry.
struct Data_S ADC_function(uint8_t count, double samplingPeriod){
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	460b      	mov	r3, r1
 8000de2:	ed87 0b00 	vstr	d0, [r7]
 8000de6:	72fb      	strb	r3, [r7, #11]

		HAL_ADC_Start(&hadc1); // the conversion starts
 8000de8:	483b      	ldr	r0, [pc, #236]	; (8000ed8 <ADC_function+0x100>)
 8000dea:	f001 f9a1 	bl	8002130 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, 200); // we wait 200 ms to make sure the conversion is done
 8000dee:	21c8      	movs	r1, #200	; 0xc8
 8000df0:	4839      	ldr	r0, [pc, #228]	; (8000ed8 <ADC_function+0x100>)
 8000df2:	f001 fa43 	bl	800227c <HAL_ADC_PollForConversion>
		Vadc = (HAL_ADC_GetValue(&hadc1)*4/4096); // we store the value resulting from the conversion and multiplied by factor (4/4096)
 8000df6:	4838      	ldr	r0, [pc, #224]	; (8000ed8 <ADC_function+0x100>)
 8000df8:	f001 fac4 	bl	8002384 <HAL_ADC_GetValue>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	0b1b      	lsrs	r3, r3, #12
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <ADC_function+0x104>)
 8000e04:	6013      	str	r3, [r2, #0]
												  // (since the resolution of the ADC is 12 bits) in the variable Vadc.

		double vcell = ((1.65-Vadc)*2); //following the formulas on the paper we are able to get the voltage and current of the cell.
 8000e06:	4b35      	ldr	r3, [pc, #212]	; (8000edc <ADC_function+0x104>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb30 	bl	8000470 <__aeabi_ui2d>
 8000e10:	4603      	mov	r3, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	461a      	mov	r2, r3
 8000e16:	4623      	mov	r3, r4
 8000e18:	a12b      	add	r1, pc, #172	; (adr r1, 8000ec8 <ADC_function+0xf0>)
 8000e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e1e:	f7ff f9e9 	bl	80001f4 <__aeabi_dsub>
 8000e22:	4603      	mov	r3, r0
 8000e24:	460c      	mov	r4, r1
 8000e26:	4618      	mov	r0, r3
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	f7ff f9e3 	bl	80001f8 <__adddf3>
 8000e32:	4603      	mov	r3, r0
 8000e34:	460c      	mov	r4, r1
 8000e36:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		double icell = ((Vadc - 1.65)*2)/Rtia;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <ADC_function+0x104>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb16 	bl	8000470 <__aeabi_ui2d>
 8000e44:	a320      	add	r3, pc, #128	; (adr r3, 8000ec8 <ADC_function+0xf0>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f7ff f9d3 	bl	80001f4 <__aeabi_dsub>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460c      	mov	r4, r1
 8000e52:	4618      	mov	r0, r3
 8000e54:	4621      	mov	r1, r4
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	f7ff f9cd 	bl	80001f8 <__adddf3>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	4618      	mov	r0, r3
 8000e64:	4621      	mov	r1, r4
 8000e66:	a31a      	add	r3, pc, #104	; (adr r3, 8000ed0 <ADC_function+0xf8>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fca4 	bl	80007b8 <__aeabi_ddiv>
 8000e70:	4603      	mov	r3, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

		struct Data_S pointdata; //here we create the structure pointdata of type Data_S so we

		pointdata.point = count; // since count represents the number of measures that have been done, we assign it to point (same meaning)
 8000e78:	7afb      	ldrb	r3, [r7, #11]
 8000e7a:	613b      	str	r3, [r7, #16]
		pointdata.timeMs = count*samplingPeriod; // according to the definition of timeMs, this multiplication corresponds to the time
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb06 	bl	8000490 <__aeabi_i2d>
 8000e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e88:	f7ff fb6c 	bl	8000564 <__aeabi_dmul>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4618      	mov	r0, r3
 8000e92:	4621      	mov	r1, r4
 8000e94:	f7ff fe00 	bl	8000a98 <__aeabi_d2uiz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	617b      	str	r3, [r7, #20]
												 // that has passed since the start of measurements
		pointdata.voltage = vcell; // voltage of the cell
 8000e9c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000ea0:	e9c7 3406 	strd	r3, r4, [r7, #24]
		pointdata.current = icell; // current of the cell
 8000ea4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000ea8:	e9c7 3408 	strd	r3, r4, [r7, #32]

		return pointdata; // as said, the function return a structure with the 4 needed parameters (for each point)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	461d      	mov	r5, r3
 8000eb0:	f107 0410 	add.w	r4, r7, #16
 8000eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ebc:	e885 0003 	stmia.w	r5, {r0, r1}
						  // needed for the graphical representation of the tests.
}
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	3ffa6666 	.word	0x3ffa6666
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	40c38800 	.word	0x40c38800
 8000ed8:	20000124 	.word	0x20000124
 8000edc:	20000034 	.word	0x20000034

08000ee0 <ChronoamperometryManagement>:

extern char *estado; // la fem extern perque s'accedirà des de l'interrupt
extern uint8_t count;


void ChronoamperometryManagement(struct CA_Configuration_S caConfiguration){
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	463c      	mov	r4, r7
 8000ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	double eDC = caConfiguration.eDC;
 8000eec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ef0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	SendVoltageToDac(eDC); //Fixem el voltatge a la cell
 8000ef4:	ed97 0b08 	vldr	d0, [r7, #32]
 8000ef8:	f000 f9be 	bl	8001278 <SendVoltageToDac>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); // Tanquem el relé
 8000efc:	2201      	movs	r2, #1
 8000efe:	2120      	movs	r1, #32
 8000f00:	481e      	ldr	r0, [pc, #120]	; (8000f7c <ChronoamperometryManagement+0x9c>)
 8000f02:	f001 feff 	bl	8002d04 <HAL_GPIO_WritePin>

	uint32_t Ts = caConfiguration.samplingPeriodMs;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	61fb      	str	r3, [r7, #28]
	uint32_t Mt = caConfiguration.measurementTime;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]

	uint8_t TotalMeasurements = round(Mt/(Ts/1000)); // Calculem el nombre necessari de measurements
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <ChronoamperometryManagement+0xa0>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	099b      	lsrs	r3, r3, #6
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff faa6 	bl	8000470 <__aeabi_ui2d>
 8000f24:	4603      	mov	r3, r0
 8000f26:	460c      	mov	r4, r1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	4621      	mov	r1, r4
 8000f2c:	f7ff fdb4 	bl	8000a98 <__aeabi_d2uiz>
 8000f30:	4603      	mov	r3, r0
 8000f32:	75fb      	strb	r3, [r7, #23]

	ClockConfiguration(Ts); // Configuració del timer
 8000f34:	69f8      	ldr	r0, [r7, #28]
 8000f36:	f000 f9df 	bl	80012f8 <ClockConfiguration>

	estado= "CA";
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <ChronoamperometryManagement+0xa4>)
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <ChronoamperometryManagement+0xa8>)
 8000f3e:	601a      	str	r2, [r3, #0]
	count = 1;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <ChronoamperometryManagement+0xac>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]

	while (count<=TotalMeasurements){ // While loop que dura tot el measurement.
 8000f46:	e00a      	b.n	8000f5e <ChronoamperometryManagement+0x7e>

		if (count == TotalMeasurements){
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <ChronoamperometryManagement+0xac>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	7dfa      	ldrb	r2, [r7, #23]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d102      	bne.n	8000f58 <ChronoamperometryManagement+0x78>
			estado = "IDLE";
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <ChronoamperometryManagement+0xa4>)
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <ChronoamperometryManagement+0xb0>)
 8000f56:	601a      	str	r2, [r3, #0]
		}

		estado= "CA";
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <ChronoamperometryManagement+0xa4>)
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <ChronoamperometryManagement+0xa8>)
 8000f5c:	601a      	str	r2, [r3, #0]
	while (count<=TotalMeasurements){ // While loop que dura tot el measurement.
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <ChronoamperometryManagement+0xac>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	7dfa      	ldrb	r2, [r7, #23]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d2ef      	bcs.n	8000f48 <ChronoamperometryManagement+0x68>

	}

	// Per tancar el clock hauria destar al propi  interrupt: HAL_TIM_Base_Stop_IT(&htim3);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // Obrim el relé
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <ChronoamperometryManagement+0xb4>)
 8000f6e:	f001 fec9 	bl	8002d04 <HAL_GPIO_WritePin>

}
 8000f72:	bf00      	nop
 8000f74:	372c      	adds	r7, #44	; 0x2c
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	10624dd3 	.word	0x10624dd3
 8000f84:	2000022c 	.word	0x2000022c
 8000f88:	08004a34 	.word	0x08004a34
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	08004a38 	.word	0x08004a38
 8000f94:	40020000 	.word	0x40020000

08000f98 <COBS_encode>:
  * @param  lenght	Especifica el número de bytes a codificar.
  * @param	codedMessage	Puntero al buffer donde se almacenará el paquete de
  * 						bytes codificado.
  * @return Número de bytes resultantes de la codificación.
  */
uint32_t COBS_encode(uint8_t *decodedMessage, uint32_t lenght, uint8_t *codedMessage) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]

  uint32_t read_index = 0,
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
		   write_index = 1,
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
		   code_index = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  uint8_t code = 0x01;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	74fb      	strb	r3, [r7, #19]

  while(read_index < lenght) {
 8000fb4:	e037      	b.n	8001026 <COBS_encode+0x8e>

    if (decodedMessage[read_index] == 0x00) {
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10c      	bne.n	8000fdc <COBS_encode+0x44>

      codedMessage[code_index] = code;
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	7cfa      	ldrb	r2, [r7, #19]
 8000fca:	701a      	strb	r2, [r3, #0]
      code_index = write_index;
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	617b      	str	r3, [r7, #20]
      write_index++;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
      code = 0x01;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	74fb      	strb	r3, [r7, #19]
 8000fda:	e021      	b.n	8001020 <COBS_encode+0x88>

    } else {

      codedMessage[write_index] = decodedMessage[read_index];
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	440b      	add	r3, r1
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
      write_index++;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
      code++;
 8000ff2:	7cfb      	ldrb	r3, [r7, #19]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	74fb      	strb	r3, [r7, #19]

      if (code == 0xFF) {
 8000ff8:	7cfb      	ldrb	r3, [r7, #19]
 8000ffa:	2bff      	cmp	r3, #255	; 0xff
 8000ffc:	d110      	bne.n	8001020 <COBS_encode+0x88>

        codedMessage[code_index] = code;
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	4413      	add	r3, r2
 8001004:	7cfa      	ldrb	r2, [r7, #19]
 8001006:	701a      	strb	r2, [r3, #0]
        code_index = write_index;
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	617b      	str	r3, [r7, #20]
        code = 0x01;
 800100c:	2301      	movs	r3, #1
 800100e:	74fb      	strb	r3, [r7, #19]
        if (read_index + 1 < lenght) write_index++;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3301      	adds	r3, #1
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	429a      	cmp	r2, r3
 8001018:	d902      	bls.n	8001020 <COBS_encode+0x88>
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	3301      	adds	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
      }
    }

    read_index++;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3301      	adds	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
  while(read_index < lenght) {
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	429a      	cmp	r2, r3
 800102c:	d3c3      	bcc.n	8000fb6 <COBS_encode+0x1e>

  }

  codedMessage[code_index] = code;
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	7cfa      	ldrb	r2, [r7, #19]
 8001036:	701a      	strb	r2, [r3, #0]

  return write_index;
 8001038:	69bb      	ldr	r3, [r7, #24]

}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <COBS_decode>:
  * @param  lenght	Especifica el número de bytes a decodificar.
  * @param	decodedMessage	Puntero al buffer donde se almacenará el paquete de
  * 						bytes decodificado.
  * @return Número de bytes resultantes de la decodificación.
  */
uint32_t COBS_decode(uint8_t *codedMessage, uint32_t lenght, uint8_t *decodedMessage) {
 8001046:	b480      	push	{r7}
 8001048:	b089      	sub	sp, #36	; 0x24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]

  uint32_t read_index = 0,
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
           write_index = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]

  while(read_index < lenght) {
 800105a:	e02e      	b.n	80010ba <COBS_decode+0x74>

    uint8_t code = codedMessage[read_index];
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	74fb      	strb	r3, [r7, #19]
    read_index++;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]

    for (int i = 1; i < code; i++) {
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e010      	b.n	8001094 <COBS_decode+0x4e>
      decodedMessage[write_index] = codedMessage[read_index];
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	441a      	add	r2, r3
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	440b      	add	r3, r1
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	701a      	strb	r2, [r3, #0]
      write_index++;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	3301      	adds	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
      read_index++;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < code; i++) {
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	7cfb      	ldrb	r3, [r7, #19]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbea      	blt.n	8001072 <COBS_decode+0x2c>
    }

    if (code < 0xFF && read_index < lenght) {
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	2bff      	cmp	r3, #255	; 0xff
 80010a0:	d00b      	beq.n	80010ba <COBS_decode+0x74>
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d207      	bcs.n	80010ba <COBS_decode+0x74>
      decodedMessage[write_index] = 0x00;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	4413      	add	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
      write_index++;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	3301      	adds	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  while(read_index < lenght) {
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3cc      	bcc.n	800105c <COBS_decode+0x16>
    }
  }

  return write_index;
 80010c2:	69bb      	ldr	r3, [r7, #24]

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3724      	adds	r7, #36	; 0x24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <Cyclic_voltammetryManagement>:
extern uint8_t count;
extern char *estado; // la fem extern perque s'accedirà des de l'interrupt
extern double vcell;


void Cyclic_voltammetryManagement(struct CV_Configuration_S cvConfiguration){
 80010d0:	b084      	sub	sp, #16
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b08f      	sub	sp, #60	; 0x3c
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80010dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	double VCELL = cvConfiguration.eBegin; //eBegin, the beginning voltage is assigned to VCELL
 80010e0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80010e4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	SendVoltageToDac(VCELL); // We use the function to apply voltage to the cell with VCELL
 80010e8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80010ec:	f000 f8c4 	bl	8001278 <SendVoltageToDac>
	double vObjetivo = cvConfiguration.eVertex1; //
 80010f0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80010f4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);// We close the realy in order to cnnect the circuit
 80010f8:	2201      	movs	r2, #1
 80010fa:	2101      	movs	r1, #1
 80010fc:	4859      	ldr	r0, [pc, #356]	; (8001264 <Cyclic_voltammetryManagement+0x194>)
 80010fe:	f001 fe01 	bl	8002d04 <HAL_GPIO_WritePin>

	uint8_t cycles = cvConfiguration.cycles; // total number of cycles the cyclic voltammetry goes through
 8001102:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	double scanRate = cvConfiguration.scanRate; //variation of the electrochemical cell in time
 800110a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800110e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double eStep = cvConfiguration.eStep; // increase/decrease of voltage between two consecutive point
 8001112:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001116:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double samplingPeriod = scanRate/eStep; //the sampling period corresponds to the time between samples
 800111a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800111e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001122:	f7ff fb49 	bl	80007b8 <__aeabi_ddiv>
 8001126:	4603      	mov	r3, r0
 8001128:	460c      	mov	r4, r1
 800112a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	ClockConfiguration(samplingPeriod); // the timer is configured with the samplingPeriod
 800112e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001132:	f7ff fcb1 	bl	8000a98 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f8dd 	bl	80012f8 <ClockConfiguration>

	uint8_t count = 1; // the count variable used in conditionals and other functions, we make it to be 1.
 800113e:	2301      	movs	r3, #1
 8001140:	71fb      	strb	r3, [r7, #7]
	estado = "CV"; // the status of the measure is CV, with all that corresponds to it.
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <Cyclic_voltammetryManagement+0x198>)
 8001144:	4a49      	ldr	r2, [pc, #292]	; (800126c <Cyclic_voltammetryManagement+0x19c>)
 8001146:	601a      	str	r2, [r3, #0]
	int sign = 1; // variable that helps us change the sign of eStep for proper application
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24

	while (count <= cycles){ // while the count has not gotten to the final cycle which is cycles
 800114c:	e079      	b.n	8001242 <Cyclic_voltammetryManagement+0x172>
		estado = "CV"; // the status of the measures is CV
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <Cyclic_voltammetryManagement+0x198>)
 8001150:	4a46      	ldr	r2, [pc, #280]	; (800126c <Cyclic_voltammetryManagement+0x19c>)
 8001152:	601a      	str	r2, [r3, #0]

		if (vcell == vObjetivo){ //if the real vcell (read with the ADC) is equal to vObjetivo
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <Cyclic_voltammetryManagement+0x1a0>)
 8001156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800115a:	461a      	mov	r2, r3
 800115c:	4623      	mov	r3, r4
 800115e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001162:	f7ff fc67 	bl	8000a34 <__aeabi_dcmpeq>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d034      	beq.n	80011d6 <Cyclic_voltammetryManagement+0x106>


				if (vObjetivo == cvConfiguration.eVertex1){ // if eVertex1 is equal to vObjetivo
 800116c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001170:	461a      	mov	r2, r3
 8001172:	4623      	mov	r3, r4
 8001174:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001178:	f7ff fc5c 	bl	8000a34 <__aeabi_dcmpeq>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <Cyclic_voltammetryManagement+0xc2>

					vObjetivo = cvConfiguration.eVertex2; // we change the value of vObjetivo to eVertex2
 8001182:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001186:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
					sign = -1; // and the sign for the eStep variable is changed
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	e057      	b.n	8001242 <Cyclic_voltammetryManagement+0x172>
				}

				else if (vObjetivo == cvConfiguration.eVertex2){ // if eVertex2 is equal to vOBjetivo
 8001192:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001196:	461a      	mov	r2, r3
 8001198:	4623      	mov	r3, r4
 800119a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800119e:	f7ff fc49 	bl	8000a34 <__aeabi_dcmpeq>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <Cyclic_voltammetryManagement+0xe6>

					vObjetivo = cvConfiguration.eBegin; //we change the value of vObjetivo to eBegin
 80011a8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80011ac:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
					sign = 1; // and the sign for the eStep variable is changed
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
 80011b4:	e045      	b.n	8001242 <Cyclic_voltammetryManagement+0x172>
				}

				else if (count == cycles){ // if the count equals the total number of cycles
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011bc:	429a      	cmp	r2, r3
 80011be:	d103      	bne.n	80011c8 <Cyclic_voltammetryManagement+0xf8>

					estado = "IDLE"; // the status is change to IDLE so it stops the measure
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <Cyclic_voltammetryManagement+0x198>)
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <Cyclic_voltammetryManagement+0x1a4>)
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e03c      	b.n	8001242 <Cyclic_voltammetryManagement+0x172>
				}

				else{ // if count is not the last cycles, cycles

					vObjetivo = cvConfiguration.eVertex1; // we change the vObjetivo value to eVertex1
 80011c8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80011cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
					sign = 1; // and the sign for the eStep variable is changed
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
 80011d4:	e035      	b.n	8001242 <Cyclic_voltammetryManagement+0x172>


		}
		else{

			if (VCELL + (eStep*sign) > vObjetivo){ //if VCELL plus the increase/decrease of eStep is larger than vObjetivo
 80011d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d8:	f7ff f95a 	bl	8000490 <__aeabi_i2d>
 80011dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011e0:	f7ff f9c0 	bl	8000564 <__aeabi_dmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	460c      	mov	r4, r1
 80011e8:	4618      	mov	r0, r3
 80011ea:	4621      	mov	r1, r4
 80011ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011f0:	f7ff f802 	bl	80001f8 <__adddf3>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001200:	f7ff fc22 	bl	8000a48 <__aeabi_dcmplt>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <Cyclic_voltammetryManagement+0x144>
				SendVoltageToDac(vObjetivo); //then we fix the voltage of the cell with this vObjetivo
 800120a:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800120e:	f000 f833 	bl	8001278 <SendVoltageToDac>
 8001212:	e016      	b.n	8001242 <Cyclic_voltammetryManagement+0x172>
			}
			else{
				VCELL = VCELL +(eStep*sign); //if its not bigger, we add to VCELL the eStep, so the voltage changes and we cna measure other points
 8001214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001216:	f7ff f93b 	bl	8000490 <__aeabi_i2d>
 800121a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800121e:	f7ff f9a1 	bl	8000564 <__aeabi_dmul>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	461a      	mov	r2, r3
 8001228:	4623      	mov	r3, r4
 800122a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800122e:	f7fe ffe3 	bl	80001f8 <__adddf3>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
				SendVoltageToDac(VCELL); // we assign this new VCELL to the voltage applied to the cell
 800123a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800123e:	f000 f81b 	bl	8001278 <SendVoltageToDac>
	while (count <= cycles){ // while the count has not gotten to the final cycle which is cycles
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001248:	429a      	cmp	r2, r3
 800124a:	d980      	bls.n	800114e <Cyclic_voltammetryManagement+0x7e>

			}
		}
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); // the relay is opened so the measurement stops
 800124c:	2200      	movs	r2, #0
 800124e:	2101      	movs	r1, #1
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <Cyclic_voltammetryManagement+0x194>)
 8001252:	f001 fd57 	bl	8002d04 <HAL_GPIO_WritePin>

}
 8001256:	bf00      	nop
 8001258:	373c      	adds	r7, #60	; 0x3c
 800125a:	46bd      	mov	sp, r7
 800125c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr
 8001264:	40020400 	.word	0x40020400
 8001268:	2000022c 	.word	0x2000022c
 800126c:	08004a40 	.word	0x08004a40
 8001270:	20000038 	.word	0x20000038
 8001274:	08004a44 	.word	0x08004a44

08001278 <SendVoltageToDac>:
uint8_t DacBuffer[DAC_SIZE] = {0}; // buffer to save the transmitted values
uint32_t prescaler = 8.399; // Prescalado del reloj para reducir la frequancia a 10MHz
extern TIM_HandleTypeDef htim3;


void SendVoltageToDac(double Voltage){
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0b00 	vstr	d0, [r7]

	uint16_t DAC_voltage = round(Voltage*4096/4); // Conversión
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <SendVoltageToDac+0x74>)
 8001288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128c:	f7ff f96a 	bl	8000564 <__aeabi_dmul>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <SendVoltageToDac+0x78>)
 800129e:	f7ff fa8b 	bl	80007b8 <__aeabi_ddiv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	ec44 3b17 	vmov	d7, r3, r4
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	eef0 0a67 	vmov.f32	s1, s15
 80012b2:	f003 fb69 	bl	8004988 <round>
 80012b6:	ec54 3b10 	vmov	r3, r4, d0
 80012ba:	4618      	mov	r0, r3
 80012bc:	4621      	mov	r1, r4
 80012be:	f7ff fbeb 	bl	8000a98 <__aeabi_d2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	81fb      	strh	r3, [r7, #14]
	DacBuffer[0] = CONTROL_BYTE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <SendVoltageToDac+0x7c>)
 80012c8:	2240      	movs	r2, #64	; 0x40
 80012ca:	701a      	strb	r2, [r3, #0]
	DacBuffer[1] = DAC_voltage >> 4; // MSB 11-4 shift right 4 places
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <SendVoltageToDac+0x7c>)
 80012d6:	705a      	strb	r2, [r3, #1]
	DacBuffer[2] = DAC_voltage << 4; // LSB 3-0 shift left 4 places
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SendVoltageToDac+0x7c>)
 80012e2:	709a      	strb	r2, [r3, #2]

		  // Transmits data
	//HAL_I2C_Master_Transmit(&hi2c1, MCP4725_ADDR, DacBuffer, DAC_SIZE, HAL_MAX_DELAY);
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	40b00000 	.word	0x40b00000
 80012f0:	40100000 	.word	0x40100000
 80012f4:	20000040 	.word	0x20000040

080012f8 <ClockConfiguration>:

void ClockConfiguration(uint32_t Ts){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

	uint32_t ticks_period = (84e6 * (Ts/1000)); // calcul de tics per cada periode
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <ClockConfiguration+0x68>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f8b0 	bl	8000470 <__aeabi_ui2d>
 8001310:	a311      	add	r3, pc, #68	; (adr r3, 8001358 <ClockConfiguration+0x60>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f925 	bl	8000564 <__aeabi_dmul>
 800131a:	4603      	mov	r3, r0
 800131c:	460c      	mov	r4, r1
 800131e:	4618      	mov	r0, r3
 8001320:	4621      	mov	r1, r4
 8001322:	f7ff fbb9 	bl	8000a98 <__aeabi_d2uiz>
 8001326:	4603      	mov	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]

	htim3.Instance = TIM3;  // definim el timer i les caracteristiques
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <ClockConfiguration+0x6c>)
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <ClockConfiguration+0x70>)
 800132e:	601a      	str	r2, [r3, #0]
	htim3.Init.Period = ticks_period;
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <ClockConfiguration+0x6c>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	60d3      	str	r3, [r2, #12]
	htim3.Init.Prescaler = prescaler;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <ClockConfiguration+0x74>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <ClockConfiguration+0x6c>)
 800133c:	6053      	str	r3, [r2, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <ClockConfiguration+0x6c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <ClockConfiguration+0x6c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]

	HAL_TIM_Base_Start_IT(&htim3); // Inicialitzem el timer
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <ClockConfiguration+0x6c>)
 800134c:	f002 fab9 	bl	80038c2 <HAL_TIM_Base_Start_IT>

}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	00000000 	.word	0x00000000
 800135c:	419406f4 	.word	0x419406f4
 8001360:	10624dd3 	.word	0x10624dd3
 8001364:	20000230 	.word	0x20000230
 8001368:	40000400 	.word	0x40000400
 800136c:	20000000 	.word	0x20000000

08001370 <setup>:
extern uint8_t count;
extern double samplingPeriod;
extern double Ts;
extern TIM_HandleTypeDef htim3;

void setup(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

    MASB_COMM_S_waitForMessage(); // Waiting the first message.
 8001374:	f000 f8c6 	bl	8001504 <MASB_COMM_S_waitForMessage>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); // PMU setup
 8001378:	2201      	movs	r2, #1
 800137a:	2120      	movs	r1, #32
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <setup+0x18>)
 800137e:	f001 fcc1 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020000 	.word	0x40020000

0800138c <loop>:

void loop(void) {
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b095      	sub	sp, #84	; 0x54
 8001390:	af08      	add	r7, sp, #32

    if (MASB_COMM_S_dataReceived()) { // si se recibe un paquete...
 8001392:	f000 f8d3 	bl	800153c <MASB_COMM_S_dataReceived>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d038      	beq.n	800140e <loop+0x82>

        switch(MASB_COMM_S_command()) {
 800139c:	f000 f8e8 	bl	8001570 <MASB_COMM_S_command>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d022      	beq.n	80013ec <loop+0x60>
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d02e      	beq.n	8001408 <loop+0x7c>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d000      	beq.n	80013b0 <loop+0x24>

        case STOP_MEAS:
        	break;

        default:
            break;
 80013ae:	e02c      	b.n	800140a <loop+0x7e>
        	cvConfiguration = MASB_COMM_S_getCvConfiguration();
 80013b0:	4c19      	ldr	r4, [pc, #100]	; (8001418 <loop+0x8c>)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f8e7 	bl	8001588 <MASB_COMM_S_getCvConfiguration>
 80013ba:	4625      	mov	r5, r4
 80013bc:	463c      	mov	r4, r7
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        	Cyclic_voltammetryManagement(cvConfiguration);
 80013ce:	4e12      	ldr	r6, [pc, #72]	; (8001418 <loop+0x8c>)
 80013d0:	466d      	mov	r5, sp
 80013d2:	f106 0410 	add.w	r4, r6, #16
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013e6:	f7ff fe73 	bl	80010d0 <Cyclic_voltammetryManagement>
        	break;
 80013ea:	e00e      	b.n	800140a <loop+0x7e>
        	caConfiguration = MASB_COMM_S_getCaConfiguration();
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <loop+0x90>)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f915 	bl	8001620 <MASB_COMM_S_getCaConfiguration>
 80013f6:	463b      	mov	r3, r7
 80013f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	ChronoamperometryManagement(caConfiguration);
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <loop+0x90>)
 8001400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001402:	f7ff fd6d 	bl	8000ee0 <ChronoamperometryManagement>
        	break;
 8001406:	e000      	b.n	800140a <loop+0x7e>
        	break;
 8001408:	bf00      	nop

        }


        MASB_COMM_S_waitForMessage(); // esperamos a recibir un paquete nuevo
 800140a:	f000 f87b 	bl	8001504 <MASB_COMM_S_waitForMessage>
    }

}
 800140e:	bf00      	nop
 8001410:	3734      	adds	r7, #52	; 0x34
 8001412:	46bd      	mov	sp, r7
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000180 	.word	0x20000180
 800141c:	20000170 	.word	0x20000170

08001420 <interrupt_management>:


void interrupt_management(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af02      	add	r7, sp, #8

	if (strcmp(estado, "Cv") == 0){ // usamos string compare para comparar dos strings, si da 0 es que son iguales
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <interrupt_management+0xc4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	492f      	ldr	r1, [pc, #188]	; (80014e8 <interrupt_management+0xc8>)
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe fed3 	bl	80001d8 <strcmp>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d11b      	bne.n	8001470 <interrupt_management+0x50>
		struct Data_S data = ADC_function(count, samplingPeriod); // obtenemos medicion
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <interrupt_management+0xcc>)
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <interrupt_management+0xd0>)
 800143e:	ed93 7b00 	vldr	d7, [r3]
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	eeb0 0a47 	vmov.f32	s0, s14
 800144a:	eef0 0a67 	vmov.f32	s1, s15
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fcc1 	bl	8000dd8 <ADC_function>
		MASB_COMM_S_sendData(data); // mandamos medicion al host
 8001456:	466a      	mov	r2, sp
 8001458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001460:	e882 0003 	stmia.w	r2, {r0, r1}
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146a:	f000 f90d 	bl	8001688 <MASB_COMM_S_sendData>
 800146e:	e02e      	b.n	80014ce <interrupt_management+0xae>
	}
	else if (strcmp(estado, "Ca") == 0){
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <interrupt_management+0xc4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	491f      	ldr	r1, [pc, #124]	; (80014f4 <interrupt_management+0xd4>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe feae 	bl	80001d8 <strcmp>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d119      	bne.n	80014b6 <interrupt_management+0x96>
		struct Data_S data = ADC_function(count, Ts); // obtenemos medicion
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <interrupt_management+0xcc>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <interrupt_management+0xd8>)
 8001488:	ed93 7b00 	vldr	d7, [r3]
 800148c:	463b      	mov	r3, r7
 800148e:	eeb0 0a47 	vmov.f32	s0, s14
 8001492:	eef0 0a67 	vmov.f32	s1, s15
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc9d 	bl	8000dd8 <ADC_function>
		MASB_COMM_S_sendData(data); // mandamos medicion al host
 800149e:	466a      	mov	r2, sp
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014a8:	e882 0003 	stmia.w	r2, {r0, r1}
 80014ac:	463b      	mov	r3, r7
 80014ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b0:	f000 f8ea 	bl	8001688 <MASB_COMM_S_sendData>
 80014b4:	e00b      	b.n	80014ce <interrupt_management+0xae>
	}
	else if (strcmp(estado, "IDLE") == 0){
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <interrupt_management+0xc4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4910      	ldr	r1, [pc, #64]	; (80014fc <interrupt_management+0xdc>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fe8b 	bl	80001d8 <strcmp>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <interrupt_management+0xae>
		HAL_TIM_Base_Stop_IT(&htim3); // apagamos el timer
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <interrupt_management+0xe0>)
 80014ca:	f002 fa1e 	bl	800390a <HAL_TIM_Base_Stop_IT>
	}

	count++;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <interrupt_management+0xcc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <interrupt_management+0xcc>)
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	3730      	adds	r7, #48	; 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000022c 	.word	0x2000022c
 80014e8:	08004a4c 	.word	0x08004a4c
 80014ec:	20000004 	.word	0x20000004
 80014f0:	20000118 	.word	0x20000118
 80014f4:	08004a50 	.word	0x08004a50
 80014f8:	20000120 	.word	0x20000120
 80014fc:	08004a54 	.word	0x08004a54
 8001500:	20000230 	.word	0x20000230

08001504 <MASB_COMM_S_waitForMessage>:
	uint32_t l;
	uint8_t b[4];

} longConverter;

void MASB_COMM_S_waitForMessage(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

	dataReceived = FALSE;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <MASB_COMM_S_waitForMessage+0x28>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	rxIndex = 0;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MASB_COMM_S_waitForMessage+0x2c>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MASB_COMM_S_waitForMessage+0x2c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MASB_COMM_S_waitForMessage+0x30>)
 800151c:	4413      	add	r3, r2
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MASB_COMM_S_waitForMessage+0x34>)
 8001524:	f002 fe32 	bl	800418c <HAL_UART_Receive_IT>

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000113 	.word	0x20000113
 8001530:	20000112 	.word	0x20000112
 8001534:	20000044 	.word	0x20000044
 8001538:	20000270 	.word	0x20000270

0800153c <MASB_COMM_S_dataReceived>:

_Bool MASB_COMM_S_dataReceived(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

	if (dataReceived) {
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MASB_COMM_S_dataReceived+0x24>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <MASB_COMM_S_dataReceived+0x1a>

		COBS_decode(rxBuffer, rxIndex, rxBufferDecoded);
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MASB_COMM_S_dataReceived+0x28>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <MASB_COMM_S_dataReceived+0x2c>)
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <MASB_COMM_S_dataReceived+0x30>)
 8001552:	f7ff fd78 	bl	8001046 <COBS_decode>

	}

	return dataReceived;
 8001556:	4b02      	ldr	r3, [pc, #8]	; (8001560 <MASB_COMM_S_dataReceived+0x24>)
 8001558:	781b      	ldrb	r3, [r3, #0]

}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000113 	.word	0x20000113
 8001564:	20000112 	.word	0x20000112
 8001568:	200000ac 	.word	0x200000ac
 800156c:	20000044 	.word	0x20000044

08001570 <MASB_COMM_S_command>:

uint8_t MASB_COMM_S_command(void) {
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

	return rxBufferDecoded[0];
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <MASB_COMM_S_command+0x14>)
 8001576:	781b      	ldrb	r3, [r3, #0]

}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200000ac 	.word	0x200000ac

08001588 <MASB_COMM_S_getCvConfiguration>:

struct CV_Configuration_S MASB_COMM_S_getCvConfiguration(void){
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	struct CV_Configuration_S cvConfiguration;

	cvConfiguration.eBegin = saveByteArrayAsDoubleFromBuffer(rxBufferDecoded, 1);
 8001590:	2101      	movs	r1, #1
 8001592:	4822      	ldr	r0, [pc, #136]	; (800161c <MASB_COMM_S_getCvConfiguration+0x94>)
 8001594:	f000 f8ca 	bl	800172c <saveByteArrayAsDoubleFromBuffer>
 8001598:	eeb0 7a40 	vmov.f32	s14, s0
 800159c:	eef0 7a60 	vmov.f32	s15, s1
 80015a0:	ed87 7b02 	vstr	d7, [r7, #8]
	cvConfiguration.eVertex1 = saveByteArrayAsDoubleFromBuffer(rxBufferDecoded, 9);
 80015a4:	2109      	movs	r1, #9
 80015a6:	481d      	ldr	r0, [pc, #116]	; (800161c <MASB_COMM_S_getCvConfiguration+0x94>)
 80015a8:	f000 f8c0 	bl	800172c <saveByteArrayAsDoubleFromBuffer>
 80015ac:	eeb0 7a40 	vmov.f32	s14, s0
 80015b0:	eef0 7a60 	vmov.f32	s15, s1
 80015b4:	ed87 7b04 	vstr	d7, [r7, #16]
	cvConfiguration.eVertex2 = saveByteArrayAsDoubleFromBuffer(rxBufferDecoded, 17);
 80015b8:	2111      	movs	r1, #17
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <MASB_COMM_S_getCvConfiguration+0x94>)
 80015bc:	f000 f8b6 	bl	800172c <saveByteArrayAsDoubleFromBuffer>
 80015c0:	eeb0 7a40 	vmov.f32	s14, s0
 80015c4:	eef0 7a60 	vmov.f32	s15, s1
 80015c8:	ed87 7b06 	vstr	d7, [r7, #24]
	cvConfiguration.cycles = rxBufferDecoded[25];
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <MASB_COMM_S_getCvConfiguration+0x94>)
 80015ce:	7e5b      	ldrb	r3, [r3, #25]
 80015d0:	f887 3020 	strb.w	r3, [r7, #32]
	cvConfiguration.scanRate = saveByteArrayAsDoubleFromBuffer(rxBufferDecoded, 26);
 80015d4:	211a      	movs	r1, #26
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <MASB_COMM_S_getCvConfiguration+0x94>)
 80015d8:	f000 f8a8 	bl	800172c <saveByteArrayAsDoubleFromBuffer>
 80015dc:	eeb0 7a40 	vmov.f32	s14, s0
 80015e0:	eef0 7a60 	vmov.f32	s15, s1
 80015e4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	cvConfiguration.eStep = saveByteArrayAsDoubleFromBuffer(rxBufferDecoded, 34);
 80015e8:	2122      	movs	r1, #34	; 0x22
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <MASB_COMM_S_getCvConfiguration+0x94>)
 80015ec:	f000 f89e 	bl	800172c <saveByteArrayAsDoubleFromBuffer>
 80015f0:	eeb0 7a40 	vmov.f32	s14, s0
 80015f4:	eef0 7a60 	vmov.f32	s15, s1
 80015f8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30

	return cvConfiguration;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	461d      	mov	r5, r3
 8001600:	f107 0408 	add.w	r4, r7, #8
 8001604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001610:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

}
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bdb0      	pop	{r4, r5, r7, pc}
 800161c:	200000ac 	.word	0x200000ac

08001620 <MASB_COMM_S_getCaConfiguration>:

struct CA_Configuration_S MASB_COMM_S_getCaConfiguration(void){
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

	struct CA_Configuration_S caConfiguration;

	caConfiguration.eDC = saveByteArrayAsDoubleFromBuffer(rxBufferDecoded, 1);
 8001628:	2101      	movs	r1, #1
 800162a:	4816      	ldr	r0, [pc, #88]	; (8001684 <MASB_COMM_S_getCaConfiguration+0x64>)
 800162c:	f000 f87e 	bl	800172c <saveByteArrayAsDoubleFromBuffer>
 8001630:	eeb0 7a40 	vmov.f32	s14, s0
 8001634:	eef0 7a60 	vmov.f32	s15, s1
 8001638:	ed87 7b02 	vstr	d7, [r7, #8]
	caConfiguration.samplingPeriodMs = saveByteArrayAsLongFromBuffer(rxBufferDecoded, 9);
 800163c:	2109      	movs	r1, #9
 800163e:	4811      	ldr	r0, [pc, #68]	; (8001684 <MASB_COMM_S_getCaConfiguration+0x64>)
 8001640:	f000 f89c 	bl	800177c <saveByteArrayAsLongFromBuffer>
 8001644:	ec54 3b10 	vmov	r3, r4, d0
 8001648:	4618      	mov	r0, r3
 800164a:	4621      	mov	r1, r4
 800164c:	f7ff fa24 	bl	8000a98 <__aeabi_d2uiz>
 8001650:	4603      	mov	r3, r0
 8001652:	613b      	str	r3, [r7, #16]
	caConfiguration.measurementTime = saveByteArrayAsLongFromBuffer(rxBufferDecoded, 13);
 8001654:	210d      	movs	r1, #13
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <MASB_COMM_S_getCaConfiguration+0x64>)
 8001658:	f000 f890 	bl	800177c <saveByteArrayAsLongFromBuffer>
 800165c:	ec54 3b10 	vmov	r3, r4, d0
 8001660:	4618      	mov	r0, r3
 8001662:	4621      	mov	r1, r4
 8001664:	f7ff fa18 	bl	8000a98 <__aeabi_d2uiz>
 8001668:	4603      	mov	r3, r0
 800166a:	617b      	str	r3, [r7, #20]

	return caConfiguration;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	461c      	mov	r4, r3
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	200000ac 	.word	0x200000ac

08001688 <MASB_COMM_S_sendData>:

void MASB_COMM_S_sendData(struct Data_S data) {
 8001688:	b084      	sub	sp, #16
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	f107 0c10 	add.w	ip, r7, #16
 8001694:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	saveLongAsByteArrayIntoBuffer(txBufferDecoded, 0, data.point);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	461a      	mov	r2, r3
 800169c:	2100      	movs	r1, #0
 800169e:	4820      	ldr	r0, [pc, #128]	; (8001720 <MASB_COMM_S_sendData+0x98>)
 80016a0:	f000 f898 	bl	80017d4 <saveLongAsByteArrayIntoBuffer>
	saveLongAsByteArrayIntoBuffer(txBufferDecoded, 4, data.timeMs);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2104      	movs	r1, #4
 80016aa:	481d      	ldr	r0, [pc, #116]	; (8001720 <MASB_COMM_S_sendData+0x98>)
 80016ac:	f000 f892 	bl	80017d4 <saveLongAsByteArrayIntoBuffer>
	saveDoubleAsByteArrayIntoBuffer(txBufferDecoded, 8, data.voltage);
 80016b0:	ed97 7b06 	vldr	d7, [r7, #24]
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	2108      	movs	r1, #8
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <MASB_COMM_S_sendData+0x98>)
 80016c0:	f000 f8ae 	bl	8001820 <saveDoubleAsByteArrayIntoBuffer>
	saveDoubleAsByteArrayIntoBuffer(txBufferDecoded, 16, data.current);
 80016c4:	ed97 7b08 	vldr	d7, [r7, #32]
 80016c8:	eeb0 0a47 	vmov.f32	s0, s14
 80016cc:	eef0 0a67 	vmov.f32	s1, s15
 80016d0:	2110      	movs	r1, #16
 80016d2:	4813      	ldr	r0, [pc, #76]	; (8001720 <MASB_COMM_S_sendData+0x98>)
 80016d4:	f000 f8a4 	bl	8001820 <saveDoubleAsByteArrayIntoBuffer>

	uint32_t txBufferLenght = COBS_encode(txBufferDecoded, 24, txBuffer);
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MASB_COMM_S_sendData+0x9c>)
 80016da:	2118      	movs	r1, #24
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <MASB_COMM_S_sendData+0x98>)
 80016de:	f7ff fc5b 	bl	8000f98 <COBS_encode>
 80016e2:	6078      	str	r0, [r7, #4]

	txBuffer[txBufferLenght] = UART_TERM_CHAR;
 80016e4:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <MASB_COMM_S_sendData+0x9c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
	txBufferLenght++;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	607b      	str	r3, [r7, #4]

	while(!(huart2.gState == HAL_UART_STATE_READY));
 80016f4:	bf00      	nop
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MASB_COMM_S_sendData+0xa0>)
 80016f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d1f9      	bne.n	80016f6 <MASB_COMM_S_sendData+0x6e>
	HAL_UART_Transmit_IT(&huart2, txBuffer, txBufferLenght);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	b29b      	uxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	4906      	ldr	r1, [pc, #24]	; (8001724 <MASB_COMM_S_sendData+0x9c>)
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <MASB_COMM_S_sendData+0xa0>)
 800170c:	f002 fcf9 	bl	8004102 <HAL_UART_Transmit_IT>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800171a:	b004      	add	sp, #16
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200000e0 	.word	0x200000e0
 8001724:	20000078 	.word	0x20000078
 8001728:	20000270 	.word	0x20000270

0800172c <saveByteArrayAsDoubleFromBuffer>:
		HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
	}

}

static double saveByteArrayAsDoubleFromBuffer(uint8_t *buffer, uint8_t index) {
 800172c:	b490      	push	{r4, r7}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < 8 ; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e00c      	b.n	8001758 <saveByteArrayAsDoubleFromBuffer+0x2c>
		doubleConverter.b[i] = buffer[i + index];
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	4413      	add	r3, r2
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	441a      	add	r2, r3
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	7811      	ldrb	r1, [r2, #0]
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <saveByteArrayAsDoubleFromBuffer+0x4c>)
 8001750:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8 ; i++) {
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9ef      	bls.n	800173e <saveByteArrayAsDoubleFromBuffer+0x12>
	}

	return doubleConverter.d;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <saveByteArrayAsDoubleFromBuffer+0x4c>)
 8001760:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001764:	ec44 3b17 	vmov	d7, r3, r4
}
 8001768:	eeb0 0a47 	vmov.f32	s0, s14
 800176c:	eef0 0a67 	vmov.f32	s1, s15
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bc90      	pop	{r4, r7}
 8001776:	4770      	bx	lr
 8001778:	200001d0 	.word	0x200001d0

0800177c <saveByteArrayAsLongFromBuffer>:

static double saveByteArrayAsLongFromBuffer(uint8_t *buffer, uint8_t index) {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < 4 ; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e00c      	b.n	80017a8 <saveByteArrayAsLongFromBuffer+0x2c>
		longConverter.b[i] = buffer[i + index];
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4413      	add	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	441a      	add	r2, r3
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	7811      	ldrb	r1, [r2, #0]
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <saveByteArrayAsLongFromBuffer+0x54>)
 80017a0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4 ; i++) {
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3301      	adds	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d9ef      	bls.n	800178e <saveByteArrayAsLongFromBuffer+0x12>
	}

	return longConverter.l;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <saveByteArrayAsLongFromBuffer+0x54>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe5c 	bl	8000470 <__aeabi_ui2d>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	ec44 3b17 	vmov	d7, r3, r4
}
 80017c0:	eeb0 0a47 	vmov.f32	s0, s14
 80017c4:	eef0 0a67 	vmov.f32	s1, s15
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001c8 	.word	0x200001c8

080017d4 <saveLongAsByteArrayIntoBuffer>:


static void saveLongAsByteArrayIntoBuffer(uint8_t *buffer, uint8_t index, uint32_t longVal) {
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	460b      	mov	r3, r1
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	72fb      	strb	r3, [r7, #11]

	longConverter.l = longVal;
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <saveLongAsByteArrayIntoBuffer+0x48>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]

	for (uint8_t i = 0; i < 4 ; i++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
 80017ec:	e00c      	b.n	8001808 <saveLongAsByteArrayIntoBuffer+0x34>
		buffer[i + index] = longConverter.b[i];
 80017ee:	7dfa      	ldrb	r2, [r7, #23]
 80017f0:	7df9      	ldrb	r1, [r7, #23]
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	440b      	add	r3, r1
 80017f6:	4619      	mov	r1, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	440b      	add	r3, r1
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <saveLongAsByteArrayIntoBuffer+0x48>)
 80017fe:	5c8a      	ldrb	r2, [r1, r2]
 8001800:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4 ; i++) {
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	3301      	adds	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d9ef      	bls.n	80017ee <saveLongAsByteArrayIntoBuffer+0x1a>
	}
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200001c8 	.word	0x200001c8

08001820 <saveDoubleAsByteArrayIntoBuffer>:

static void saveDoubleAsByteArrayIntoBuffer(uint8_t *buffer, uint8_t index, double doubleVal) {
 8001820:	b490      	push	{r4, r7}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	460b      	mov	r3, r1
 800182a:	ed87 0b00 	vstr	d0, [r7]
 800182e:	72fb      	strb	r3, [r7, #11]

	doubleConverter.d = doubleVal;
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <saveDoubleAsByteArrayIntoBuffer+0x4c>)
 8001832:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001836:	e9c2 3400 	strd	r3, r4, [r2]

	for (uint8_t i = 0; i < 8 ; i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
 800183e:	e00c      	b.n	800185a <saveDoubleAsByteArrayIntoBuffer+0x3a>
		buffer[i + index] = doubleConverter.b[i];
 8001840:	7dfa      	ldrb	r2, [r7, #23]
 8001842:	7df9      	ldrb	r1, [r7, #23]
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	440b      	add	r3, r1
 8001848:	4619      	mov	r1, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	440b      	add	r3, r1
 800184e:	4907      	ldr	r1, [pc, #28]	; (800186c <saveDoubleAsByteArrayIntoBuffer+0x4c>)
 8001850:	5c8a      	ldrb	r2, [r1, r2]
 8001852:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8 ; i++) {
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	3301      	adds	r3, #1
 8001858:	75fb      	strb	r3, [r7, #23]
 800185a:	7dfb      	ldrb	r3, [r7, #23]
 800185c:	2b07      	cmp	r3, #7
 800185e:	d9ef      	bls.n	8001840 <saveDoubleAsByteArrayIntoBuffer+0x20>
	}
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bc90      	pop	{r4, r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	200001d0 	.word	0x200001d0

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f000 fba6 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f810 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f000 f970 	bl	8001b60 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001880:	f000 f878 	bl	8001974 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001884:	f000 f942 	bl	8001b0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001888:	f000 f8c6 	bl	8001a18 <MX_I2C1_Init>
  MX_TIM3_Init();
 800188c:	f000 f8f2 	bl	8001a74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001890:	f7ff fd6e 	bl	8001370 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001894:	f7ff fd7a 	bl	800138c <loop>
 8001898:	e7fc      	b.n	8001894 <main+0x24>
	...

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 f864 	bl	8004978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <SystemClock_Config+0xd0>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <SystemClock_Config+0xd0>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <SystemClock_Config+0xd0>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <SystemClock_Config+0xd4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <SystemClock_Config+0xd4>)
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <SystemClock_Config+0xd4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001910:	2310      	movs	r3, #16
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001914:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800191a:	2304      	movs	r3, #4
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800191e:	2307      	movs	r3, #7
 8001920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fb3e 	bl	8002fa8 <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001932:	f000 f9a3 	bl	8001c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193a:	2302      	movs	r3, #2
 800193c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fd98 	bl	8003488 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800195e:	f000 f98d 	bl	8001c7c <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	; 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <MX_ADC1_Init+0x98>)
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <MX_ADC1_Init+0x9c>)
 800198a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_ADC1_Init+0x98>)
 800198e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001992:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_ADC1_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <MX_ADC1_Init+0xa0>)
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019d6:	f000 fb67 	bl	80020a8 <HAL_ADC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019e0:	f000 f94c 	bl	8001c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019f6:	f000 fcd3 	bl	80023a0 <HAL_ADC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a00:	f000 f93c 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000124 	.word	0x20000124
 8001a10:	40012000 	.word	0x40012000
 8001a14:	0f000001 	.word	0x0f000001

08001a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <MX_I2C1_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a56:	f001 f96f 	bl	8002d38 <HAL_I2C_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a60:	f000 f90c 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200001d8 	.word	0x200001d8
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	000186a0 	.word	0x000186a0

08001a74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <MX_TIM3_Init+0x94>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001ab6:	f001 fed9 	bl	800386c <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001ac0:	f000 f8dc 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001ad2:	f002 f84d 	bl	8003b70 <HAL_TIM_ConfigClockSource>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001adc:	f000 f8ce 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_TIM3_Init+0x90>)
 8001aee:	f002 fa39 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001af8:	f000 f8c0 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000230 	.word	0x20000230
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <MX_USART2_UART_Init+0x50>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_USART2_UART_Init+0x4c>)
 8001b44:	f002 fa90 	bl	8004068 <HAL_UART_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b4e:	f000 f895 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000270 	.word	0x20000270
 8001b5c:	40004400 	.word	0x40004400

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a35      	ldr	r2, [pc, #212]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a2e      	ldr	r2, [pc, #184]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_GPIO_Init+0xf4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2120      	movs	r1, #32
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <MX_GPIO_Init+0xf8>)
 8001bec:	f001 f88a 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	4819      	ldr	r0, [pc, #100]	; (8001c5c <MX_GPIO_Init+0xfc>)
 8001bf6:	f001 f885 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_GPIO_Init+0x100>)
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4815      	ldr	r0, [pc, #84]	; (8001c64 <MX_GPIO_Init+0x104>)
 8001c10:	f000 fef6 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8001c14:	2320      	movs	r3, #32
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <MX_GPIO_Init+0xf8>)
 8001c2c:	f000 fee8 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8001c30:	2320      	movs	r3, #32
 8001c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_GPIO_Init+0xfc>)
 8001c48:	f000 feda 	bl	8002a00 <HAL_GPIO_Init>

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	10210000 	.word	0x10210000
 8001c64:	40020800 	.word	0x40020800

08001c68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

	interrupt_management();
 8001c70:	f7ff fbd6 	bl	8001420 <interrupt_management>

}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cca:	2007      	movs	r0, #7
 8001ccc:	f000 fe56 	bl	800297c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_ADC_MspInit+0x7c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d127      	bne.n	8001d4e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_ADC_MspInit+0x80>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0x80>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_ADC_MspInit+0x80>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_ADC_MspInit+0x80>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_ADC_MspInit+0x80>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_ADC_MspInit+0x80>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = VREF_Pin|IREF_Pin;
 8001d36:	2303      	movs	r3, #3
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_ADC_MspInit+0x84>)
 8001d4a:	f000 fe59 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_I2C_MspInit+0x84>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12c      	bne.n	8001de0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_I2C_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a17      	ldr	r2, [pc, #92]	; (8001dec <HAL_I2C_MspInit+0x88>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_I2C_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da8:	2312      	movs	r3, #18
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db4:	2304      	movs	r3, #4
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480c      	ldr	r0, [pc, #48]	; (8001df0 <HAL_I2C_MspInit+0x8c>)
 8001dc0:	f000 fe1e 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_I2C_MspInit+0x88>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_I2C_MspInit+0x88>)
 8001dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_I2C_MspInit+0x88>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40005400 	.word	0x40005400
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020400 	.word	0x40020400

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d115      	bne.n	8001e32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_TIM_Base_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_TIM_Base_MspInit+0x4c>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_TIM_Base_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	201d      	movs	r0, #29
 8001e28:	f000 fdb3 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e2c:	201d      	movs	r0, #29
 8001e2e:	f000 fdcc 	bl	80029ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40023800 	.word	0x40023800

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_UART_MspInit+0x84>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12b      	bne.n	8001ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_UART_MspInit+0x8c>)
 8001eba:	f000 fda1 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <MemManage_Handler+0x4>

08001eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f000 f89e 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <TIM3_IRQHandler+0x10>)
 8001f36:	f001 fd13 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000230 	.word	0x20000230

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <SystemInit+0x28>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <SystemInit+0x28>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SystemInit+0x28>)
 8001f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f76:	e003      	b.n	8001f80 <LoopCopyDataInit>

08001f78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f7e:	3104      	adds	r1, #4

08001f80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f88:	d3f6      	bcc.n	8001f78 <CopyDataInit>
  ldr  r2, =_sbss
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f8c:	e002      	b.n	8001f94 <LoopFillZerobss>

08001f8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f90:	f842 3b04 	str.w	r3, [r2], #4

08001f94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f98:	d3f9      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9a:	f7ff ffd3 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f002 fcc7 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7ff fc65 	bl	8001870 <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001fac:	08004a84 	.word	0x08004a84
  ldr  r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001fb8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001fbc:	200002b4 	.word	0x200002b4

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <HAL_Init+0x40>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_Init+0x40>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_Init+0x40>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 fcc5 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f808 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff fe48 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_InitTick+0x54>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x58>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fcdd 	bl	80029e6 <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f000 fca5 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <HAL_InitTick+0x5c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000008 	.word	0x20000008
 8002060:	20000010 	.word	0x20000010
 8002064:	2000000c 	.word	0x2000000c

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000010 	.word	0x20000010
 800208c:	200002b0 	.word	0x200002b0

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200002b0 	.word	0x200002b0

080020a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e033      	b.n	8002126 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fe08 	bl	8001cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ee:	f023 0302 	bic.w	r3, r3, #2
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa72 	bl	80025e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
 8002116:	e001      	b.n	800211c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADC_Start+0x1a>
 8002146:	2302      	movs	r3, #2
 8002148:	e08a      	b.n	8002260 <HAL_ADC_Start+0x130>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d018      	beq.n	8002192 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002170:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_ADC_Start+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3e      	ldr	r2, [pc, #248]	; (8002270 <HAL_ADC_Start+0x140>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9a      	lsrs	r2, r3, #18
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002184:	e002      	b.n	800218c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d15e      	bne.n	800225e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d106      	bne.n	80021ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f023 0206 	bic.w	r2, r3, #6
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_ADC_Start+0x144>)
 80021fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002208:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10f      	bne.n	8002236 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11c      	bne.n	800225e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e013      	b.n	800225e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_ADC_Start+0x148>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d10e      	bne.n	800225e <HAL_ADC_Start+0x12e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800225c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	20000008 	.word	0x20000008
 8002270:	431bde83 	.word	0x431bde83
 8002274:	40012300 	.word	0x40012300
 8002278:	40012000 	.word	0x40012000

0800227c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002298:	d113      	bne.n	80022c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a8:	d10b      	bne.n	80022c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f043 0220 	orr.w	r2, r3, #32
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e05c      	b.n	800237c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022c2:	f7ff fee5 	bl	8002090 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022c8:	e01a      	b.n	8002300 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d016      	beq.n	8002300 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_ADC_PollForConversion+0x6c>
 80022d8:	f7ff feda 	bl	8002090 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d20b      	bcs.n	8002300 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f043 0204 	orr.w	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e03d      	b.n	800237c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d1dd      	bne.n	80022ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0212 	mvn.w	r2, #18
 8002316:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d123      	bne.n	800237a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11f      	bne.n	800237a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002352:	2b00      	cmp	r3, #0
 8002354:	d111      	bne.n	800237a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1c>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e105      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x228>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d925      	bls.n	8002418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	3b1e      	subs	r3, #30
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	400a      	ands	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	4603      	mov	r3, r0
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4403      	add	r3, r0
 800240a:	3b1e      	subs	r3, #30
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e022      	b.n	800245e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	2207      	movs	r2, #7
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	400a      	ands	r2, r1
 800243a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	4603      	mov	r3, r0
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4403      	add	r3, r0
 8002454:	409a      	lsls	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d824      	bhi.n	80024b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b05      	subs	r3, #5
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	400a      	ands	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b05      	subs	r3, #5
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
 80024ae:	e04c      	b.n	800254a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d824      	bhi.n	8002502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b23      	subs	r3, #35	; 0x23
 80024ca:	221f      	movs	r2, #31
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43da      	mvns	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	400a      	ands	r2, r1
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	; 0x23
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002500:	e023      	b.n	800254a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3b41      	subs	r3, #65	; 0x41
 8002514:	221f      	movs	r2, #31
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	400a      	ands	r2, r1
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b41      	subs	r3, #65	; 0x41
 800253e:	fa00 f203 	lsl.w	r2, r0, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_ADC_ConfigChannel+0x234>)
 800254c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_ADC_ConfigChannel+0x238>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d109      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1cc>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b12      	cmp	r3, #18
 800255e:	d105      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_ADC_ConfigChannel+0x238>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d123      	bne.n	80025be <HAL_ADC_ConfigChannel+0x21e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d003      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x1e6>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b11      	cmp	r3, #17
 8002584:	d11b      	bne.n	80025be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d111      	bne.n	80025be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_ADC_ConfigChannel+0x23c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_ADC_ConfigChannel+0x240>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9a      	lsrs	r2, r3, #18
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f9      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012300 	.word	0x40012300
 80025d8:	40012000 	.word	0x40012000
 80025dc:	20000008 	.word	0x20000008
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ec:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <ADC_Init+0x1f0>)
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800263c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <ADC_Init+0x1f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e00f      	b.n	80026e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0202 	bic.w	r2, r2, #2
 80026f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e1b      	ldrb	r3, [r3, #24]
 80026fc:	005a      	lsls	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800272e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	035a      	lsls	r2, r3, #13
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e007      	b.n	8002758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	3b01      	subs	r3, #1
 8002774:	051a      	lsls	r2, r3, #20
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279a:	025a      	lsls	r2, r3, #9
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	029a      	lsls	r2, r3, #10
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012300 	.word	0x40012300
 80027d8:	0f000001 	.word	0x0f000001

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ff8e 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff29 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff3e 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ff8e 	bl	80028d0 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff5d 	bl	800287c <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff31 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffa2 	bl	8002938 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e159      	b.n	8002cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8148 	bne.w	8002cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d00b      	beq.n	8002a5a <HAL_GPIO_Init+0x5a>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0xfc>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a2 	beq.w	8002cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x2e4>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a55      	ldr	r2, [pc, #340]	; (8002ce4 <HAL_GPIO_Init+0x2e4>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <HAL_GPIO_Init+0x2e4>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a51      	ldr	r2, [pc, #324]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a48      	ldr	r2, [pc, #288]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x202>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a47      	ldr	r2, [pc, #284]	; (8002cf0 <HAL_GPIO_Init+0x2f0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x1fe>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_GPIO_Init+0x2f4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x1fa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_GPIO_Init+0x2f8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <HAL_GPIO_Init+0x2fc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x1f2>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002c02:	2300      	movs	r3, #0
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c14:	4934      	ldr	r1, [pc, #208]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c46:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	f67f aea2 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3724      	adds	r7, #36	; 0x24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40013c00 	.word	0x40013c00

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e11f      	b.n	8002f8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff f800 	bl	8001d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	; 0x24
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f000 fd3e 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a7b      	ldr	r2, [pc, #492]	; (8002f94 <HAL_I2C_Init+0x25c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d807      	bhi.n	8002dbc <HAL_I2C_Init+0x84>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a7a      	ldr	r2, [pc, #488]	; (8002f98 <HAL_I2C_Init+0x260>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e006      	b.n	8002dca <HAL_I2C_Init+0x92>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a77      	ldr	r2, [pc, #476]	; (8002f9c <HAL_I2C_Init+0x264>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf94      	ite	ls
 8002dc4:	2301      	movls	r3, #1
 8002dc6:	2300      	movhi	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0db      	b.n	8002f8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a72      	ldr	r2, [pc, #456]	; (8002fa0 <HAL_I2C_Init+0x268>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <HAL_I2C_Init+0x25c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <HAL_I2C_Init+0xd4>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	e009      	b.n	8002e20 <HAL_I2C_Init+0xe8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <HAL_I2C_Init+0x26c>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4956      	ldr	r1, [pc, #344]	; (8002f94 <HAL_I2C_Init+0x25c>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d80d      	bhi.n	8002e5c <HAL_I2C_Init+0x124>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e59      	subs	r1, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	bf38      	it	cc
 8002e58:	2304      	movcc	r3, #4
 8002e5a:	e04f      	b.n	8002efc <HAL_I2C_Init+0x1c4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_I2C_Init+0x150>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Init+0x176>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x17e>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_I2C_Init+0x1c4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <HAL_I2C_Init+0x1a4>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e58      	subs	r0, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	440b      	add	r3, r1
 8002ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eda:	e00f      	b.n	8002efc <HAL_I2C_Init+0x1c4>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6809      	ldr	r1, [r1, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6911      	ldr	r1, [r2, #16]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	000186a0 	.word	0x000186a0
 8002f98:	001e847f 	.word	0x001e847f
 8002f9c:	003d08ff 	.word	0x003d08ff
 8002fa0:	431bde83 	.word	0x431bde83
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e25b      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d075      	beq.n	80030b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc6:	4ba3      	ldr	r3, [pc, #652]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d00c      	beq.n	8002fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd2:	4ba0      	ldr	r3, [pc, #640]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d112      	bne.n	8003004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b9d      	ldr	r3, [pc, #628]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b99      	ldr	r3, [pc, #612]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x108>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d157      	bne.n	80030b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e236      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x74>
 800300e:	4b91      	ldr	r3, [pc, #580]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a90      	ldr	r2, [pc, #576]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xb0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x98>
 8003026:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a8a      	ldr	r2, [pc, #552]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a87      	ldr	r2, [pc, #540]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xb0>
 8003040:	4b84      	ldr	r3, [pc, #528]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a83      	ldr	r2, [pc, #524]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b81      	ldr	r3, [pc, #516]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff f816 	bl	8002090 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff f812 	bl	8002090 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1fb      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xc0>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff f802 	bl	8002090 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe fffe 	bl	8002090 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1e7      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0xe8>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ca:	4b62      	ldr	r3, [pc, #392]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d11c      	bne.n	8003110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x152>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1bb      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4952      	ldr	r1, [pc, #328]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	e03a      	b.n	8003186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <HAL_RCC_OscConfig+0x2b0>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fe ffb7 	bl	8002090 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003126:	f7fe ffb3 	bl	8002090 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e19c      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	4b46      	ldr	r3, [pc, #280]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4940      	ldr	r1, [pc, #256]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	e015      	b.n	8003186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_OscConfig+0x2b0>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe ff96 	bl	8002090 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003168:	f7fe ff92 	bl	8002090 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e17b      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d030      	beq.n	80031f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319a:	4b30      	ldr	r3, [pc, #192]	; (800325c <HAL_RCC_OscConfig+0x2b4>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe ff76 	bl	8002090 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe ff72 	bl	8002090 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e15b      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x200>
 80031c6:	e015      	b.n	80031f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_OscConfig+0x2b4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fe ff5f 	bl	8002090 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe ff5b 	bl	8002090 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e144      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a0 	beq.w	8003342 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_OscConfig+0x2b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d121      	bne.n	8003282 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCC_OscConfig+0x2b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_RCC_OscConfig+0x2b8>)
 8003244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324a:	f7fe ff21 	bl	8002090 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	e011      	b.n	8003276 <HAL_RCC_OscConfig+0x2ce>
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	42470000 	.word	0x42470000
 800325c:	42470e80 	.word	0x42470e80
 8003260:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7fe ff14 	bl	8002090 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0fd      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x4d4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d106      	bne.n	8003298 <HAL_RCC_OscConfig+0x2f0>
 800328a:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a7c      	ldr	r2, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	e01c      	b.n	80032d2 <HAL_RCC_OscConfig+0x32a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d10c      	bne.n	80032ba <HAL_RCC_OscConfig+0x312>
 80032a0:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a76      	ldr	r2, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e00b      	b.n	80032d2 <HAL_RCC_OscConfig+0x32a>
 80032ba:	4b71      	ldr	r3, [pc, #452]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a70      	ldr	r2, [pc, #448]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a6d      	ldr	r2, [pc, #436]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d015      	beq.n	8003306 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fe fed9 	bl	8002090 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fed5 	bl	8002090 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0bc      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ee      	beq.n	80032e2 <HAL_RCC_OscConfig+0x33a>
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fe fec3 	bl	8002090 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe febf 	bl	8002090 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0a6      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ee      	bne.n	800330e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003336:	4b52      	ldr	r3, [pc, #328]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a51      	ldr	r2, [pc, #324]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8092 	beq.w	8003470 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334c:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d05c      	beq.n	8003412 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d141      	bne.n	80033e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b48      	ldr	r3, [pc, #288]	; (8003484 <HAL_RCC_OscConfig+0x4dc>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fe93 	bl	8002090 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fe8f 	bl	8002090 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e078      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003380:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	019b      	lsls	r3, r3, #6
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	3b01      	subs	r3, #1
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	4933      	ldr	r1, [pc, #204]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x4dc>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fe68 	bl	8002090 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fe64 	bl	8002090 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e04d      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x41c>
 80033e2:	e045      	b.n	8003470 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x4dc>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fe51 	bl	8002090 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fe4d 	bl	8002090 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e036      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x44a>
 8003410:	e02e      	b.n	8003470 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e029      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800341e:	4b18      	ldr	r3, [pc, #96]	; (8003480 <HAL_RCC_OscConfig+0x4d8>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	429a      	cmp	r2, r3
 8003430:	d11c      	bne.n	800346c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d115      	bne.n	800346c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800344c:	4293      	cmp	r3, r2
 800344e:	d10d      	bne.n	800346c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000
 8003480:	40023800 	.word	0x40023800
 8003484:	42470060 	.word	0x42470060

08003488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0cc      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d90c      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0b8      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034dc:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	494d      	ldr	r1, [pc, #308]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d044      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d119      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d003      	beq.n	8003546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	2b03      	cmp	r3, #3
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e067      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b37      	ldr	r3, [pc, #220]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4934      	ldr	r1, [pc, #208]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe fd8a 	bl	8002090 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fd86 	bl	8002090 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e04f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d20c      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e032      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4916      	ldr	r1, [pc, #88]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	490e      	ldr	r1, [pc, #56]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360e:	f000 f821 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003612:	4601      	mov	r1, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	fa21 f303 	lsr.w	r3, r1, r3
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fcea 	bl	8002008 <HAL_InitTick>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00
 8003644:	40023800 	.word	0x40023800
 8003648:	08004a5c 	.word	0x08004a5c
 800364c:	20000008 	.word	0x20000008
 8003650:	2000000c 	.word	0x2000000c

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	2300      	movs	r3, #0
 8003664:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d007      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x32>
 8003676:	2b08      	cmp	r3, #8
 8003678:	d008      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x38>
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 80b4 	bne.w	80037e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003682:	60bb      	str	r3, [r7, #8]
       break;
 8003684:	e0b3      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003686:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003688:	60bb      	str	r3, [r7, #8]
      break;
 800368a:	e0b0      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800368c:	4b5a      	ldr	r3, [pc, #360]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003696:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d04a      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	ea03 0501 	and.w	r5, r3, r1
 80036b8:	ea04 0602 	and.w	r6, r4, r2
 80036bc:	4629      	mov	r1, r5
 80036be:	4632      	mov	r2, r6
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	0154      	lsls	r4, r2, #5
 80036ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ce:	014b      	lsls	r3, r1, #5
 80036d0:	4619      	mov	r1, r3
 80036d2:	4622      	mov	r2, r4
 80036d4:	1b49      	subs	r1, r1, r5
 80036d6:	eb62 0206 	sbc.w	r2, r2, r6
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	f04f 0400 	mov.w	r4, #0
 80036e2:	0194      	lsls	r4, r2, #6
 80036e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036e8:	018b      	lsls	r3, r1, #6
 80036ea:	1a5b      	subs	r3, r3, r1
 80036ec:	eb64 0402 	sbc.w	r4, r4, r2
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	00e2      	lsls	r2, r4, #3
 80036fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036fe:	00d9      	lsls	r1, r3, #3
 8003700:	460b      	mov	r3, r1
 8003702:	4614      	mov	r4, r2
 8003704:	195b      	adds	r3, r3, r5
 8003706:	eb44 0406 	adc.w	r4, r4, r6
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	0262      	lsls	r2, r4, #9
 8003714:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003718:	0259      	lsls	r1, r3, #9
 800371a:	460b      	mov	r3, r1
 800371c:	4614      	mov	r4, r2
 800371e:	4618      	mov	r0, r3
 8003720:	4621      	mov	r1, r4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f04f 0400 	mov.w	r4, #0
 8003728:	461a      	mov	r2, r3
 800372a:	4623      	mov	r3, r4
 800372c:	f7fd f9d4 	bl	8000ad8 <__aeabi_uldivmod>
 8003730:	4603      	mov	r3, r0
 8003732:	460c      	mov	r4, r1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e049      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	ea03 0501 	and.w	r5, r3, r1
 800374e:	ea04 0602 	and.w	r6, r4, r2
 8003752:	4629      	mov	r1, r5
 8003754:	4632      	mov	r2, r6
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	f04f 0400 	mov.w	r4, #0
 800375e:	0154      	lsls	r4, r2, #5
 8003760:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003764:	014b      	lsls	r3, r1, #5
 8003766:	4619      	mov	r1, r3
 8003768:	4622      	mov	r2, r4
 800376a:	1b49      	subs	r1, r1, r5
 800376c:	eb62 0206 	sbc.w	r2, r2, r6
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	0194      	lsls	r4, r2, #6
 800377a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800377e:	018b      	lsls	r3, r1, #6
 8003780:	1a5b      	subs	r3, r3, r1
 8003782:	eb64 0402 	sbc.w	r4, r4, r2
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	00e2      	lsls	r2, r4, #3
 8003790:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003794:	00d9      	lsls	r1, r3, #3
 8003796:	460b      	mov	r3, r1
 8003798:	4614      	mov	r4, r2
 800379a:	195b      	adds	r3, r3, r5
 800379c:	eb44 0406 	adc.w	r4, r4, r6
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	02a2      	lsls	r2, r4, #10
 80037aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ae:	0299      	lsls	r1, r3, #10
 80037b0:	460b      	mov	r3, r1
 80037b2:	4614      	mov	r4, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	4621      	mov	r1, r4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f04f 0400 	mov.w	r4, #0
 80037be:	461a      	mov	r2, r3
 80037c0:	4623      	mov	r3, r4
 80037c2:	f7fd f989 	bl	8000ad8 <__aeabi_uldivmod>
 80037c6:	4603      	mov	r3, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	60bb      	str	r3, [r7, #8]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037ea:	60bb      	str	r3, [r7, #8]
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	68bb      	ldr	r3, [r7, #8]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	007a1200 	.word	0x007a1200

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000008 	.word	0x20000008

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4601      	mov	r1, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4a03      	ldr	r2, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08004a6c 	.word	0x08004a6c

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4601      	mov	r1, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4a03      	ldr	r2, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08004a6c 	.word	0x08004a6c

0800386c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e01d      	b.n	80038ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe faae 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f000 fa40 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d007      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	f241 1311 	movw	r3, #4369	; 0x1111
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_TIM_Base_Stop_IT+0x48>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	f240 4344 	movw	r3, #1092	; 0x444
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_TIM_Base_Stop_IT+0x48>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9a5 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f997 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f9a8 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0204 	mvn.w	r2, #4
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f97b 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f96d 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f97e 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f951 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f943 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f954 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f927 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f919 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f92a 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0201 	mvn.w	r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe f8c2 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 faa2 	bl	8004054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8ef 	bl	8003d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d10e      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d107      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0220 	mvn.w	r2, #32
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa6c 	bl	8004040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIM_ConfigClockSource+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e0a6      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x166>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d067      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0x120>
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d80b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x6c>
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d073      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0x140>
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d802      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x62>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d06f      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bd0:	e078      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d06c      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0x140>
 8003bd6:	2b30      	cmp	r3, #48	; 0x30
 8003bd8:	d06a      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bda:	e073      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bdc:	2b70      	cmp	r3, #112	; 0x70
 8003bde:	d00d      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x8c>
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d804      	bhi.n	8003bee <HAL_TIM_ConfigClockSource+0x7e>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d033      	beq.n	8003c50 <HAL_TIM_ConfigClockSource+0xe0>
 8003be8:	2b60      	cmp	r3, #96	; 0x60
 8003bea:	d041      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bec:	e06a      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	d066      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x152>
 8003bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf8:	d017      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bfa:	e063      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f000 f98a 	bl	8003f24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
      break;
 8003c28:	e04c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f000 f973 	bl	8003f24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4c:	609a      	str	r2, [r3, #8]
      break;
 8003c4e:	e039      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f000 f8e7 	bl	8003e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2150      	movs	r1, #80	; 0x50
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f940 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003c6e:	e029      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f000 f906 	bl	8003e8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2160      	movs	r1, #96	; 0x60
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f930 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003c8e:	e019      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f000 f8c7 	bl	8003e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2140      	movs	r1, #64	; 0x40
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f920 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003cae:	e009      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 f917 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <TIM_Base_SetConfig+0xe4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00f      	beq.n	8003d68 <TIM_Base_SetConfig+0x38>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d00b      	beq.n	8003d68 <TIM_Base_SetConfig+0x38>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a31      	ldr	r2, [pc, #196]	; (8003e18 <TIM_Base_SetConfig+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <TIM_Base_SetConfig+0x38>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a30      	ldr	r2, [pc, #192]	; (8003e1c <TIM_Base_SetConfig+0xec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_Base_SetConfig+0x38>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2f      	ldr	r2, [pc, #188]	; (8003e20 <TIM_Base_SetConfig+0xf0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d108      	bne.n	8003d7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <TIM_Base_SetConfig+0xe4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01b      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d017      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <TIM_Base_SetConfig+0xe8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <TIM_Base_SetConfig+0xec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <TIM_Base_SetConfig+0xf0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <TIM_Base_SetConfig+0xf4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <TIM_Base_SetConfig+0xf8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x8a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <TIM_Base_SetConfig+0xfc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <TIM_Base_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800

08003e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 030a 	bic.w	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e050      	b.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a15      	ldr	r2, [pc, #84]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10c      	bne.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40014000 	.word	0x40014000

08004040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e03f      	b.n	80040fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fed8 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	; 0x24
 8004098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f8c3 	bl	8004238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d130      	bne.n	800417e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit_IT+0x26>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e029      	b.n	8004180 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_UART_Transmit_IT+0x38>
 8004136:	2302      	movs	r3, #2
 8004138:	e022      	b.n	8004180 <HAL_UART_Transmit_IT+0x7e>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2221      	movs	r2, #33	; 0x21
 800415e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004178:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d140      	bne.n	8004228 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_UART_Receive_IT+0x26>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e039      	b.n	800422a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Receive_IT+0x38>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e032      	b.n	800422a <HAL_UART_Receive_IT+0x9e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2222      	movs	r2, #34	; 0x22
 80041e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004202:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0220 	orr.w	r2, r2, #32
 8004222:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800427a:	f023 030c 	bic.w	r3, r3, #12
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	430b      	orrs	r3, r1
 8004286:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a6:	f040 818b 	bne.w	80045c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4ac1      	ldr	r2, [pc, #772]	; (80045b4 <UART_SetConfig+0x37c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d005      	beq.n	80042c0 <UART_SetConfig+0x88>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4abf      	ldr	r2, [pc, #764]	; (80045b8 <UART_SetConfig+0x380>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f040 80bd 	bne.w	800443a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7ff fac0 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80042c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	461d      	mov	r5, r3
 80042ca:	f04f 0600 	mov.w	r6, #0
 80042ce:	46a8      	mov	r8, r5
 80042d0:	46b1      	mov	r9, r6
 80042d2:	eb18 0308 	adds.w	r3, r8, r8
 80042d6:	eb49 0409 	adc.w	r4, r9, r9
 80042da:	4698      	mov	r8, r3
 80042dc:	46a1      	mov	r9, r4
 80042de:	eb18 0805 	adds.w	r8, r8, r5
 80042e2:	eb49 0906 	adc.w	r9, r9, r6
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042fa:	4688      	mov	r8, r1
 80042fc:	4691      	mov	r9, r2
 80042fe:	eb18 0005 	adds.w	r0, r8, r5
 8004302:	eb49 0106 	adc.w	r1, r9, r6
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	461d      	mov	r5, r3
 800430c:	f04f 0600 	mov.w	r6, #0
 8004310:	196b      	adds	r3, r5, r5
 8004312:	eb46 0406 	adc.w	r4, r6, r6
 8004316:	461a      	mov	r2, r3
 8004318:	4623      	mov	r3, r4
 800431a:	f7fc fbdd 	bl	8000ad8 <__aeabi_uldivmod>
 800431e:	4603      	mov	r3, r0
 8004320:	460c      	mov	r4, r1
 8004322:	461a      	mov	r2, r3
 8004324:	4ba5      	ldr	r3, [pc, #660]	; (80045bc <UART_SetConfig+0x384>)
 8004326:	fba3 2302 	umull	r2, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	461d      	mov	r5, r3
 8004334:	f04f 0600 	mov.w	r6, #0
 8004338:	46a9      	mov	r9, r5
 800433a:	46b2      	mov	sl, r6
 800433c:	eb19 0309 	adds.w	r3, r9, r9
 8004340:	eb4a 040a 	adc.w	r4, sl, sl
 8004344:	4699      	mov	r9, r3
 8004346:	46a2      	mov	sl, r4
 8004348:	eb19 0905 	adds.w	r9, r9, r5
 800434c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800435c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004360:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004364:	4689      	mov	r9, r1
 8004366:	4692      	mov	sl, r2
 8004368:	eb19 0005 	adds.w	r0, r9, r5
 800436c:	eb4a 0106 	adc.w	r1, sl, r6
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	461d      	mov	r5, r3
 8004376:	f04f 0600 	mov.w	r6, #0
 800437a:	196b      	adds	r3, r5, r5
 800437c:	eb46 0406 	adc.w	r4, r6, r6
 8004380:	461a      	mov	r2, r3
 8004382:	4623      	mov	r3, r4
 8004384:	f7fc fba8 	bl	8000ad8 <__aeabi_uldivmod>
 8004388:	4603      	mov	r3, r0
 800438a:	460c      	mov	r4, r1
 800438c:	461a      	mov	r2, r3
 800438e:	4b8b      	ldr	r3, [pc, #556]	; (80045bc <UART_SetConfig+0x384>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	2164      	movs	r1, #100	; 0x64
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	3332      	adds	r3, #50	; 0x32
 80043a2:	4a86      	ldr	r2, [pc, #536]	; (80045bc <UART_SetConfig+0x384>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b0:	4498      	add	r8, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	461d      	mov	r5, r3
 80043b6:	f04f 0600 	mov.w	r6, #0
 80043ba:	46a9      	mov	r9, r5
 80043bc:	46b2      	mov	sl, r6
 80043be:	eb19 0309 	adds.w	r3, r9, r9
 80043c2:	eb4a 040a 	adc.w	r4, sl, sl
 80043c6:	4699      	mov	r9, r3
 80043c8:	46a2      	mov	sl, r4
 80043ca:	eb19 0905 	adds.w	r9, r9, r5
 80043ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e6:	4689      	mov	r9, r1
 80043e8:	4692      	mov	sl, r2
 80043ea:	eb19 0005 	adds.w	r0, r9, r5
 80043ee:	eb4a 0106 	adc.w	r1, sl, r6
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	461d      	mov	r5, r3
 80043f8:	f04f 0600 	mov.w	r6, #0
 80043fc:	196b      	adds	r3, r5, r5
 80043fe:	eb46 0406 	adc.w	r4, r6, r6
 8004402:	461a      	mov	r2, r3
 8004404:	4623      	mov	r3, r4
 8004406:	f7fc fb67 	bl	8000ad8 <__aeabi_uldivmod>
 800440a:	4603      	mov	r3, r0
 800440c:	460c      	mov	r4, r1
 800440e:	461a      	mov	r2, r3
 8004410:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <UART_SetConfig+0x384>)
 8004412:	fba3 1302 	umull	r1, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2164      	movs	r1, #100	; 0x64
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	3332      	adds	r3, #50	; 0x32
 8004424:	4a65      	ldr	r2, [pc, #404]	; (80045bc <UART_SetConfig+0x384>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 0207 	and.w	r2, r3, #7
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4442      	add	r2, r8
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	e26f      	b.n	800491a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800443a:	f7ff f9ef 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800443e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	461d      	mov	r5, r3
 8004444:	f04f 0600 	mov.w	r6, #0
 8004448:	46a8      	mov	r8, r5
 800444a:	46b1      	mov	r9, r6
 800444c:	eb18 0308 	adds.w	r3, r8, r8
 8004450:	eb49 0409 	adc.w	r4, r9, r9
 8004454:	4698      	mov	r8, r3
 8004456:	46a1      	mov	r9, r4
 8004458:	eb18 0805 	adds.w	r8, r8, r5
 800445c:	eb49 0906 	adc.w	r9, r9, r6
 8004460:	f04f 0100 	mov.w	r1, #0
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800446c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004470:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004474:	4688      	mov	r8, r1
 8004476:	4691      	mov	r9, r2
 8004478:	eb18 0005 	adds.w	r0, r8, r5
 800447c:	eb49 0106 	adc.w	r1, r9, r6
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	461d      	mov	r5, r3
 8004486:	f04f 0600 	mov.w	r6, #0
 800448a:	196b      	adds	r3, r5, r5
 800448c:	eb46 0406 	adc.w	r4, r6, r6
 8004490:	461a      	mov	r2, r3
 8004492:	4623      	mov	r3, r4
 8004494:	f7fc fb20 	bl	8000ad8 <__aeabi_uldivmod>
 8004498:	4603      	mov	r3, r0
 800449a:	460c      	mov	r4, r1
 800449c:	461a      	mov	r2, r3
 800449e:	4b47      	ldr	r3, [pc, #284]	; (80045bc <UART_SetConfig+0x384>)
 80044a0:	fba3 2302 	umull	r2, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	461d      	mov	r5, r3
 80044ae:	f04f 0600 	mov.w	r6, #0
 80044b2:	46a9      	mov	r9, r5
 80044b4:	46b2      	mov	sl, r6
 80044b6:	eb19 0309 	adds.w	r3, r9, r9
 80044ba:	eb4a 040a 	adc.w	r4, sl, sl
 80044be:	4699      	mov	r9, r3
 80044c0:	46a2      	mov	sl, r4
 80044c2:	eb19 0905 	adds.w	r9, r9, r5
 80044c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044de:	4689      	mov	r9, r1
 80044e0:	4692      	mov	sl, r2
 80044e2:	eb19 0005 	adds.w	r0, r9, r5
 80044e6:	eb4a 0106 	adc.w	r1, sl, r6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	461d      	mov	r5, r3
 80044f0:	f04f 0600 	mov.w	r6, #0
 80044f4:	196b      	adds	r3, r5, r5
 80044f6:	eb46 0406 	adc.w	r4, r6, r6
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	f7fc faeb 	bl	8000ad8 <__aeabi_uldivmod>
 8004502:	4603      	mov	r3, r0
 8004504:	460c      	mov	r4, r1
 8004506:	461a      	mov	r2, r3
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <UART_SetConfig+0x384>)
 800450a:	fba3 1302 	umull	r1, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2164      	movs	r1, #100	; 0x64
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	3332      	adds	r3, #50	; 0x32
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <UART_SetConfig+0x384>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800452a:	4498      	add	r8, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	461d      	mov	r5, r3
 8004530:	f04f 0600 	mov.w	r6, #0
 8004534:	46a9      	mov	r9, r5
 8004536:	46b2      	mov	sl, r6
 8004538:	eb19 0309 	adds.w	r3, r9, r9
 800453c:	eb4a 040a 	adc.w	r4, sl, sl
 8004540:	4699      	mov	r9, r3
 8004542:	46a2      	mov	sl, r4
 8004544:	eb19 0905 	adds.w	r9, r9, r5
 8004548:	eb4a 0a06 	adc.w	sl, sl, r6
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004558:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800455c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004560:	4689      	mov	r9, r1
 8004562:	4692      	mov	sl, r2
 8004564:	eb19 0005 	adds.w	r0, r9, r5
 8004568:	eb4a 0106 	adc.w	r1, sl, r6
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	461d      	mov	r5, r3
 8004572:	f04f 0600 	mov.w	r6, #0
 8004576:	196b      	adds	r3, r5, r5
 8004578:	eb46 0406 	adc.w	r4, r6, r6
 800457c:	461a      	mov	r2, r3
 800457e:	4623      	mov	r3, r4
 8004580:	f7fc faaa 	bl	8000ad8 <__aeabi_uldivmod>
 8004584:	4603      	mov	r3, r0
 8004586:	460c      	mov	r4, r1
 8004588:	461a      	mov	r2, r3
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <UART_SetConfig+0x384>)
 800458c:	fba3 1302 	umull	r1, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2164      	movs	r1, #100	; 0x64
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	4a07      	ldr	r2, [pc, #28]	; (80045bc <UART_SetConfig+0x384>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	f003 0207 	and.w	r2, r3, #7
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4442      	add	r2, r8
 80045b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045b2:	e1b2      	b.n	800491a <UART_SetConfig+0x6e2>
 80045b4:	40011000 	.word	0x40011000
 80045b8:	40011400 	.word	0x40011400
 80045bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4ad7      	ldr	r2, [pc, #860]	; (8004924 <UART_SetConfig+0x6ec>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d005      	beq.n	80045d6 <UART_SetConfig+0x39e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4ad6      	ldr	r2, [pc, #856]	; (8004928 <UART_SetConfig+0x6f0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	f040 80d1 	bne.w	8004778 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d6:	f7ff f935 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80045da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	469a      	mov	sl, r3
 80045e0:	f04f 0b00 	mov.w	fp, #0
 80045e4:	46d0      	mov	r8, sl
 80045e6:	46d9      	mov	r9, fp
 80045e8:	eb18 0308 	adds.w	r3, r8, r8
 80045ec:	eb49 0409 	adc.w	r4, r9, r9
 80045f0:	4698      	mov	r8, r3
 80045f2:	46a1      	mov	r9, r4
 80045f4:	eb18 080a 	adds.w	r8, r8, sl
 80045f8:	eb49 090b 	adc.w	r9, r9, fp
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004608:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800460c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004610:	4688      	mov	r8, r1
 8004612:	4691      	mov	r9, r2
 8004614:	eb1a 0508 	adds.w	r5, sl, r8
 8004618:	eb4b 0609 	adc.w	r6, fp, r9
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4619      	mov	r1, r3
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	f04f 0400 	mov.w	r4, #0
 800462e:	0094      	lsls	r4, r2, #2
 8004630:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004634:	008b      	lsls	r3, r1, #2
 8004636:	461a      	mov	r2, r3
 8004638:	4623      	mov	r3, r4
 800463a:	4628      	mov	r0, r5
 800463c:	4631      	mov	r1, r6
 800463e:	f7fc fa4b 	bl	8000ad8 <__aeabi_uldivmod>
 8004642:	4603      	mov	r3, r0
 8004644:	460c      	mov	r4, r1
 8004646:	461a      	mov	r2, r3
 8004648:	4bb8      	ldr	r3, [pc, #736]	; (800492c <UART_SetConfig+0x6f4>)
 800464a:	fba3 2302 	umull	r2, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	469b      	mov	fp, r3
 8004658:	f04f 0c00 	mov.w	ip, #0
 800465c:	46d9      	mov	r9, fp
 800465e:	46e2      	mov	sl, ip
 8004660:	eb19 0309 	adds.w	r3, r9, r9
 8004664:	eb4a 040a 	adc.w	r4, sl, sl
 8004668:	4699      	mov	r9, r3
 800466a:	46a2      	mov	sl, r4
 800466c:	eb19 090b 	adds.w	r9, r9, fp
 8004670:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004680:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004688:	4689      	mov	r9, r1
 800468a:	4692      	mov	sl, r2
 800468c:	eb1b 0509 	adds.w	r5, fp, r9
 8004690:	eb4c 060a 	adc.w	r6, ip, sl
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4619      	mov	r1, r3
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	0094      	lsls	r4, r2, #2
 80046a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ac:	008b      	lsls	r3, r1, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	4623      	mov	r3, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	4631      	mov	r1, r6
 80046b6:	f7fc fa0f 	bl	8000ad8 <__aeabi_uldivmod>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	461a      	mov	r2, r3
 80046c0:	4b9a      	ldr	r3, [pc, #616]	; (800492c <UART_SetConfig+0x6f4>)
 80046c2:	fba3 1302 	umull	r1, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2164      	movs	r1, #100	; 0x64
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	3332      	adds	r3, #50	; 0x32
 80046d4:	4a95      	ldr	r2, [pc, #596]	; (800492c <UART_SetConfig+0x6f4>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e0:	4498      	add	r8, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	469b      	mov	fp, r3
 80046e6:	f04f 0c00 	mov.w	ip, #0
 80046ea:	46d9      	mov	r9, fp
 80046ec:	46e2      	mov	sl, ip
 80046ee:	eb19 0309 	adds.w	r3, r9, r9
 80046f2:	eb4a 040a 	adc.w	r4, sl, sl
 80046f6:	4699      	mov	r9, r3
 80046f8:	46a2      	mov	sl, r4
 80046fa:	eb19 090b 	adds.w	r9, r9, fp
 80046fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004712:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004716:	4689      	mov	r9, r1
 8004718:	4692      	mov	sl, r2
 800471a:	eb1b 0509 	adds.w	r5, fp, r9
 800471e:	eb4c 060a 	adc.w	r6, ip, sl
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4619      	mov	r1, r3
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	0094      	lsls	r4, r2, #2
 8004736:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800473a:	008b      	lsls	r3, r1, #2
 800473c:	461a      	mov	r2, r3
 800473e:	4623      	mov	r3, r4
 8004740:	4628      	mov	r0, r5
 8004742:	4631      	mov	r1, r6
 8004744:	f7fc f9c8 	bl	8000ad8 <__aeabi_uldivmod>
 8004748:	4603      	mov	r3, r0
 800474a:	460c      	mov	r4, r1
 800474c:	461a      	mov	r2, r3
 800474e:	4b77      	ldr	r3, [pc, #476]	; (800492c <UART_SetConfig+0x6f4>)
 8004750:	fba3 1302 	umull	r1, r3, r3, r2
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	2164      	movs	r1, #100	; 0x64
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	3332      	adds	r3, #50	; 0x32
 8004762:	4a72      	ldr	r2, [pc, #456]	; (800492c <UART_SetConfig+0x6f4>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4442      	add	r2, r8
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	e0d0      	b.n	800491a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7ff f850 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800477c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	469a      	mov	sl, r3
 8004782:	f04f 0b00 	mov.w	fp, #0
 8004786:	46d0      	mov	r8, sl
 8004788:	46d9      	mov	r9, fp
 800478a:	eb18 0308 	adds.w	r3, r8, r8
 800478e:	eb49 0409 	adc.w	r4, r9, r9
 8004792:	4698      	mov	r8, r3
 8004794:	46a1      	mov	r9, r4
 8004796:	eb18 080a 	adds.w	r8, r8, sl
 800479a:	eb49 090b 	adc.w	r9, r9, fp
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047b2:	4688      	mov	r8, r1
 80047b4:	4691      	mov	r9, r2
 80047b6:	eb1a 0508 	adds.w	r5, sl, r8
 80047ba:	eb4b 0609 	adc.w	r6, fp, r9
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4619      	mov	r1, r3
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	0094      	lsls	r4, r2, #2
 80047d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d6:	008b      	lsls	r3, r1, #2
 80047d8:	461a      	mov	r2, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	4628      	mov	r0, r5
 80047de:	4631      	mov	r1, r6
 80047e0:	f7fc f97a 	bl	8000ad8 <__aeabi_uldivmod>
 80047e4:	4603      	mov	r3, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b50      	ldr	r3, [pc, #320]	; (800492c <UART_SetConfig+0x6f4>)
 80047ec:	fba3 2302 	umull	r2, r3, r3, r2
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	469b      	mov	fp, r3
 80047fa:	f04f 0c00 	mov.w	ip, #0
 80047fe:	46d9      	mov	r9, fp
 8004800:	46e2      	mov	sl, ip
 8004802:	eb19 0309 	adds.w	r3, r9, r9
 8004806:	eb4a 040a 	adc.w	r4, sl, sl
 800480a:	4699      	mov	r9, r3
 800480c:	46a2      	mov	sl, r4
 800480e:	eb19 090b 	adds.w	r9, r9, fp
 8004812:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800482a:	4689      	mov	r9, r1
 800482c:	4692      	mov	sl, r2
 800482e:	eb1b 0509 	adds.w	r5, fp, r9
 8004832:	eb4c 060a 	adc.w	r6, ip, sl
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4619      	mov	r1, r3
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	0094      	lsls	r4, r2, #2
 800484a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	461a      	mov	r2, r3
 8004852:	4623      	mov	r3, r4
 8004854:	4628      	mov	r0, r5
 8004856:	4631      	mov	r1, r6
 8004858:	f7fc f93e 	bl	8000ad8 <__aeabi_uldivmod>
 800485c:	4603      	mov	r3, r0
 800485e:	460c      	mov	r4, r1
 8004860:	461a      	mov	r2, r3
 8004862:	4b32      	ldr	r3, [pc, #200]	; (800492c <UART_SetConfig+0x6f4>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	2164      	movs	r1, #100	; 0x64
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	3332      	adds	r3, #50	; 0x32
 8004876:	4a2d      	ldr	r2, [pc, #180]	; (800492c <UART_SetConfig+0x6f4>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004882:	4498      	add	r8, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	469b      	mov	fp, r3
 8004888:	f04f 0c00 	mov.w	ip, #0
 800488c:	46d9      	mov	r9, fp
 800488e:	46e2      	mov	sl, ip
 8004890:	eb19 0309 	adds.w	r3, r9, r9
 8004894:	eb4a 040a 	adc.w	r4, sl, sl
 8004898:	4699      	mov	r9, r3
 800489a:	46a2      	mov	sl, r4
 800489c:	eb19 090b 	adds.w	r9, r9, fp
 80048a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048a4:	f04f 0100 	mov.w	r1, #0
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048b8:	4689      	mov	r9, r1
 80048ba:	4692      	mov	sl, r2
 80048bc:	eb1b 0509 	adds.w	r5, fp, r9
 80048c0:	eb4c 060a 	adc.w	r6, ip, sl
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	f04f 0400 	mov.w	r4, #0
 80048d6:	0094      	lsls	r4, r2, #2
 80048d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048dc:	008b      	lsls	r3, r1, #2
 80048de:	461a      	mov	r2, r3
 80048e0:	4623      	mov	r3, r4
 80048e2:	4628      	mov	r0, r5
 80048e4:	4631      	mov	r1, r6
 80048e6:	f7fc f8f7 	bl	8000ad8 <__aeabi_uldivmod>
 80048ea:	4603      	mov	r3, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	461a      	mov	r2, r3
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <UART_SetConfig+0x6f4>)
 80048f2:	fba3 1302 	umull	r1, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2164      	movs	r1, #100	; 0x64
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	3332      	adds	r3, #50	; 0x32
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <UART_SetConfig+0x6f4>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	f003 020f 	and.w	r2, r3, #15
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4442      	add	r2, r8
 8004916:	609a      	str	r2, [r3, #8]
}
 8004918:	e7ff      	b.n	800491a <UART_SetConfig+0x6e2>
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004924:	40011000 	.word	0x40011000
 8004928:	40011400 	.word	0x40011400
 800492c:	51eb851f 	.word	0x51eb851f

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4e0d      	ldr	r6, [pc, #52]	; (8004968 <__libc_init_array+0x38>)
 8004934:	4c0d      	ldr	r4, [pc, #52]	; (800496c <__libc_init_array+0x3c>)
 8004936:	1ba4      	subs	r4, r4, r6
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	2500      	movs	r5, #0
 800493c:	42a5      	cmp	r5, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	4e0b      	ldr	r6, [pc, #44]	; (8004970 <__libc_init_array+0x40>)
 8004942:	4c0c      	ldr	r4, [pc, #48]	; (8004974 <__libc_init_array+0x44>)
 8004944:	f000 f86a 	bl	8004a1c <_init>
 8004948:	1ba4      	subs	r4, r4, r6
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	2500      	movs	r5, #0
 800494e:	42a5      	cmp	r5, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004958:	4798      	blx	r3
 800495a:	3501      	adds	r5, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004962:	4798      	blx	r3
 8004964:	3501      	adds	r5, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	08004a7c 	.word	0x08004a7c
 800496c:	08004a7c 	.word	0x08004a7c
 8004970:	08004a7c 	.word	0x08004a7c
 8004974:	08004a80 	.word	0x08004a80

08004978 <memset>:
 8004978:	4402      	add	r2, r0
 800497a:	4603      	mov	r3, r0
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	f803 1b01 	strb.w	r1, [r3], #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <round>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	ec57 6b10 	vmov	r6, r7, d0
 800498e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8004992:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8004996:	2c13      	cmp	r4, #19
 8004998:	463b      	mov	r3, r7
 800499a:	463d      	mov	r5, r7
 800499c:	dc17      	bgt.n	80049ce <round+0x46>
 800499e:	2c00      	cmp	r4, #0
 80049a0:	da09      	bge.n	80049b6 <round+0x2e>
 80049a2:	3401      	adds	r4, #1
 80049a4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80049a8:	d103      	bne.n	80049b2 <round+0x2a>
 80049aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80049ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80049b2:	2100      	movs	r1, #0
 80049b4:	e02c      	b.n	8004a10 <round+0x88>
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <round+0x90>)
 80049b8:	4122      	asrs	r2, r4
 80049ba:	4217      	tst	r7, r2
 80049bc:	d100      	bne.n	80049c0 <round+0x38>
 80049be:	b19e      	cbz	r6, 80049e8 <round+0x60>
 80049c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049c4:	4123      	asrs	r3, r4
 80049c6:	442b      	add	r3, r5
 80049c8:	ea23 0302 	bic.w	r3, r3, r2
 80049cc:	e7f1      	b.n	80049b2 <round+0x2a>
 80049ce:	2c33      	cmp	r4, #51	; 0x33
 80049d0:	dd0d      	ble.n	80049ee <round+0x66>
 80049d2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80049d6:	d107      	bne.n	80049e8 <round+0x60>
 80049d8:	4630      	mov	r0, r6
 80049da:	4639      	mov	r1, r7
 80049dc:	ee10 2a10 	vmov	r2, s0
 80049e0:	f7fb fc0a 	bl	80001f8 <__adddf3>
 80049e4:	4606      	mov	r6, r0
 80049e6:	460f      	mov	r7, r1
 80049e8:	ec47 6b10 	vmov	d0, r6, r7
 80049ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ee:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80049f2:	f04f 30ff 	mov.w	r0, #4294967295
 80049f6:	40d0      	lsrs	r0, r2
 80049f8:	4206      	tst	r6, r0
 80049fa:	d0f5      	beq.n	80049e8 <round+0x60>
 80049fc:	2201      	movs	r2, #1
 80049fe:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004a02:	fa02 f404 	lsl.w	r4, r2, r4
 8004a06:	1931      	adds	r1, r6, r4
 8004a08:	bf28      	it	cs
 8004a0a:	189b      	addcs	r3, r3, r2
 8004a0c:	ea21 0100 	bic.w	r1, r1, r0
 8004a10:	461f      	mov	r7, r3
 8004a12:	460e      	mov	r6, r1
 8004a14:	e7e8      	b.n	80049e8 <round+0x60>
 8004a16:	bf00      	nop
 8004a18:	000fffff 	.word	0x000fffff

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
